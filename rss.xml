<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hexo</title>
    <link>https://doctor-deng.github.io/</link>
    
    <image>
      <url>https://doctor-deng.github.io/icon.png</url>
      <title>Hexo</title>
      <link>https://doctor-deng.github.io/</link>
    </image>
    
    <atom:link href="/rss.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Thu, 14 May 2020 10:28:02 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>笔记之算法与数据结构（持续更新中）</title>
      <link>https://doctor-deng.github.io/BJ-suanfa.html</link>
      <guid>https://doctor-deng.github.io/BJ-suanfa.html</guid>
      <pubDate>Sun, 10 May 2020 02:52:21 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h2 id=&quot;笔记之算法和数据结构&quot;&gt;&lt;a href=&quot;#笔记之算法和数据结构&quot; class=&quot;headerlink&quot;
          
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="笔记之算法和数据结构"><a href="#笔记之算法和数据结构" class="headerlink" title="笔记之算法和数据结构"></a>笔记之算法和数据结构</h2><p>面试需要掌握的算法与数据结构这一块的内容，大概有以下几点：</p><ol><li>​       数组、<strong>链表、二叉树</strong>、队列、栈的各种操作（性能，场景）            </li><li>​       二分查找和各种变种的二分查找            </li><li>​       各类排序算法以及复杂度分析（<strong>快排、归并、堆</strong>）            </li><li>​       各类算法题（手写）            </li><li>​       理解并可以分析时间和空间复杂度。            </li><li>​       动态规划（笔试回回有。。）、贪心。            </li><li>​       红黑树、AVL树、Hash树、Tire树、B树、B+树。            </li><li>​       图算法（比较少，也就两个最短路径算法理解吧） </li></ol><h2 id="分析时间复杂度"><a href="#分析时间复杂度" class="headerlink" title="分析时间复杂度"></a><strong>分析时间复杂度</strong></h2><p><strong>时间复杂度</strong>表示代码执行时间随数据规模增长的变化趋势。以下两个程序为例子</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>          sum <span class="token operator">=</span> sum <span class="token operator">+</span> i<span class="token punctuation">;</span>       <span class="token punctuation">}</span>      <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>假设每段代码执行的时间都一样，记为 unit_time ，第二、第三行的代码都需要 1 unit_time，第四第五行都需要 n * unit_time ，那么这段代码的总执行时间就为 (2n+2)unit_time</p><p>PS：T(n) 代表的是代码的执行时间，n 表示数据规模的大小。f（n）表示每行代码执行的次数总和<br>如果用大 O 复杂度表示呢，就是 T( n )=O（f（n）），当 n 很大的时候，你可以将它想象为10000。而公式中的低阶、常量、系数三部分并不左右增长趋势，所以可以将它忽略。这段代码的时间复杂度就为 T(n) = O(n)</p><p>依次类推，再来分析下面这一段代码的时间复杂度</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">int</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>          j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>              sum <span class="token operator">=</span> sum <span class="token operator">+</span>  i <span class="token operator">*</span> j<span class="token punctuation">;</span>              <span class="token punctuation">}</span>       <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><p>如果用大O复杂度表示呢，就是 T(n)=O(n)</p><p>假设每段代码执行的时间都一样，记为 unit_time ，第一、二、第三行的代码都需要 1 unit_time，第四、五行都需要 n * unit_time ，第六、七行都需要 n * n unit_time，所以总结起来，这段代码的总执行时间为（3+2n+2n²）n * unit_time<br>时间复杂度为：T(n) = O(n²)</p><h2 id="方法和技巧"><a href="#方法和技巧" class="headerlink" title="方法和技巧"></a><strong>方法和技巧</strong></h2><ul><li><p>只关注循环次数最多的那一段代码。<br>就拿上面的那段程序来讲吧，就是 时间复杂度为 O(n²)</p></li><li><p><strong>加法法则</strong>：总复杂度等于<strong>量级最大</strong>的那段代码的复杂度</p></li><li><pre class=" language-Java"><code class="language-Java">int cal(int n) {    //这一段能明显看出，它没有时间复杂度，哪怕循环体里面是10000也好，这是一个常量的执行时间，尽管它对程序的执行时间会有很大影响，但它对增长趋势并没有影响（时间复杂度的概念），所以呢，与时间复杂度无关，它的时间复杂度为 O(1)    int sum_1 = 0;    int p = 1;    for (; p < 100; ++p) {        sum_1 = sum_1 + p;       }     //这一段代码，明显就可以看出是 O(n)    int sum_2 = 0;    int q = 1;    for (; q < n; ++q) {        sum_2 = sum_2 + q;    }    //这一段代码，也可以轻易的看出时间复杂度为O(n²)    int sum_3 = 0;     int i = 1;    int j = 1;    for (; i <= n; ++i) {        j = 1;        for (; j <= n; ++j) {             sum_3 = sum_3 +  i * j;        }    }    return sum_1 + sum_2 + sum_3; } </code></pre><p>那么根据加法法则：T1(n) = O(f(n))，T2(n) = O(g(n))；那么T(n)=T1(n) + T2(n) = max(O(f(n))，O(g(n))) = max((f(n)，g(n))</p></li><li><p><strong>乘法法则</strong>：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</p></li><li><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//可以简单的一眼看出，这段代码的时间复杂度为 O(n)</span><span class="token keyword">int</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ret <span class="token operator">=</span> ret <span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//这段代码的时间复杂度也同样为 O(n)</span>  <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>          sum <span class="token operator">=</span> sum <span class="token operator">+</span> i<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> sum<span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre></li><li><p>因为第一段程序的循环体里面包含了，第二段程序的运行，所以它们嵌套了。<br>T(n) = T1(n) * T2(n) = O(n*n) = O(n²)</p></li></ul><p><strong>常见的时间复杂度量级</strong></p><table><thead><tr><th>常量阶 O(1)</th><th>线性阶 O(n)</th><th>平方阶 O（n²）</th></tr></thead><tbody><tr><td>对数阶 O(Log n)</td><td>线性队数阶 O(nLog n)</td><td>立方阶 O(n³)</td></tr><tr><td>指数阶 O(2^n)</td><td>阶乘 O(n!)</td><td>k 次方阶 O(n^k)</td></tr></tbody></table><ul><li><p><strong>O(1)</strong><br>只要代码的执行时间不随着 n 的增大而增长，那么这样的事件复杂度就为 O(1)。<br>只要算法中不存在循环语句（涉及到 n 之类的）、递归语 句，即使有成千上万行的代码，其时间复杂度也是Ο(1)。 </p></li><li><p><strong>O(logn)、O(n log n)</strong></p></li><li><p>对数阶时间复杂度非常常见，同时也是最难分析的一种时间复杂度。</p></li><li><pre class=" language-java"><code class="language-java">i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span>  <span class="token punctuation">{</span>     i <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li><li><p>类似于一个等比数列，2^0  *  2^1  * 2^2  * ….. 2^k  * ……  2^x = n<br>只要知道 X 的值是多少，就可以知道这行代码的执行粗疏，通过 2^x = n。<br>x=log2n （2是底数，不知道为什么输入不出来）O(log2n)</p></li><li><p>根据上面的这个例子，来观察下面这个程序</p></li><li><pre class=" language-java"><code class="language-java">i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span>  <span class="token punctuation">{</span>     i <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li><li><p>类似于一个等比数列，3^0  *  3^1  * 3^2  * ….. 3^k  * ……  3^x = n<br>时间复杂度也类似的，x=log3n。O(log3n)</p></li><li><p>对数之间是可以相互转换的，在采用 大O 标记复杂度的时候，可以忽略系数，即O(Cf(n)) = O(f(n))。所以上面两段代码的时间复杂度都可以为 O(logn)。</p></li><li><p>O(nlogn)就是基于乘法法则的，如果一段代码的时间复杂度为 log(longn)，那么循环执行 n 遍，时间复杂度就是 O（nlogn），比如，归并排序、快速排序的时间复杂度都是 O(nlogn)</p></li><li><p><strong>O（m+n）、O(m*n)</strong></p></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> sum_1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        sum_1 <span class="token operator">=</span> sum_1 <span class="token operator">+</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">int</span> sum_2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>         sum_2 <span class="token operator">=</span> sum_2 <span class="token operator">+</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum_1 <span class="token operator">+</span> sum_2<span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre></li><li><p>从代码中看出，这个 cal 函数里有 m 和 n 两个数据规模，无法判断 m  和 n 的量级大，所以在表示复杂度时，就不要简单的用加法法则，上面的时间复杂度是 O(m+n)</p></li><li><p>所以这种情况，我们需要将加法法则改为 T1(m) + T2(n) = O(F(m) + g(n))。<br>但是乘法法则继续有效： T1(m)*T2(n) = O(f(m) * f(n))</p></li></ul><h2 id="空间复杂度分析"><a href="#空间复杂度分析" class="headerlink" title="空间复杂度分析"></a><strong>空间复杂度分析</strong></h2><ul><li><p>时间复杂度的全称是渐进时间复杂度，表示算法的执行时间与数据规模之间的关系。同理，空间复杂度的全称是渐进空间复杂度，表示算法的存储空间与数据规模之间的增长关系。</p></li><li><p>以以下的代码为例子：</p></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">*</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        print out a<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre></li><li><p>和时间复杂度分析一样，第二行代码，我们申请了一个空间存储变量 i，但它是常量阶的，跟数据规模 n 没有关系，忽略不计。那么第三行代码，申请了一个大小为 n 的 int  类型数组，除此之外，剩下的代码都没有占用更多的空间，所以它的空间复杂度为 O（n）。</p></li><li><p>空间复杂度，指的是除了原本的数据存储空间外，算法运行时还需要的额外的存储空间</p></li><li><p>常见的空间复杂度为 ：O(1)、O(n)、O(n²)</p></li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a><strong>数组</strong></h2><p>数组是一种线性表数据结构，使用连续的内存存储空间，存储一组相同类型数据</p><p>数组支持随机访问，根据下标随机访问的时间复杂度为  O(1)</p><h3 id="数组的低效插入和低效删除"><a href="#数组的低效插入和低效删除" class="headerlink" title="数组的低效插入和低效删除"></a><strong>数组的低效插入和低效删除</strong></h3><p>在数组的末尾插入元素，就不用移动数据，时间复杂度为  O(1)<br>在数组的开头插入元素，每个数组都要移动，最坏时间复杂度为 O(n)<br>在每个位置插入元素的概率一致，平均时间复杂度为 O(n)<br>删除和插入类似，时间、最坏、平均复杂度都一致</p><h3 id="容器能否完全替代数组？"><a href="#容器能否完全替代数组？" class="headerlink" title="容器能否完全替代数组？"></a><strong>容器能否完全替代数组？</strong></h3><p>针对数组类型，很多语言都提供了容器类，比如 Java 中的 ArrayList<br>ArrayList 最大的优势就是可以将很多数组操作的细节封装起来。比如前面提到的数组插入、删除数据时需要搬移其他数据等。另外，它还有一个优 势，就是支持动态扩容。</p><p>1.Java ArrayList 无法存储基本类型，比如 int、long，需要封装为 Integer、Long类，而 Autoboxing、Unboxing 则有一定的性能消耗，所以如果特别关注性能，或者希 望使用基本类型，就可以选用数组。 </p><p>2.如果数据大小事先已知，并且对数据的操作非常简单，用不到 ArrayList 提供的大部分方法，也可以直接使用数组。</p><p> 3.当要表示多维数组时，用数组往往会更加直观。比如Object[][] array；而用容器的话则需要这样定义：ArrayList<arraylist> array。</arraylist></p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a><strong>链表</strong></h2><p>常见的三种链表结构：单链表、双向链表、循环链表</p><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p>头结点记录链表的基址，尾结点指向 Null</p><p>单链表的插入和删除操作，时间复杂度为 O(1)，因为只需要考虑相邻结点的指针改变，链表的存储空间本身不是连续的</p><p>单链表的随机访问：因为存储空间不连续的，需要根据指针一个结点一个结点地依次遍历，直到找到相应的结点，时间复杂度为 O(n)</p><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a><strong>循环链表</strong></h3><p>尾结点指针指向链表的头结点<br>当处理的数据有环形结构特点时，适合用循环链表。比如著名的<a href="https://zh.wikipedia.org/wiki/约瑟夫斯问题" target="_blank" rel="noopener">约瑟夫问题</a></p><h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a><strong>双向链表</strong></h3><p>支持两个方向，每个结点不止一个后继指针 next 指向后面的结点，还有个前驱指针 prev 指向前面的结点</p><p>双向链表的插入和删除时间复杂度都为 O(1)，双向链表的插入和删除操作比单链表更简单、高效</p><p>比如：删除操作，从链表中删除一个数组，有两种情况：</p><ul><li>删除结点中“值等于某个给定值”的结点</li><li>删除给定指针指向的结点</li></ul><p>第一种情况：<br>无论是单链表还是双向链表，都要先从头开始遍历，直到找到“值等于给定值”的结点，然后再通过指针操作将其删除</p><p>删除操作时间复杂度是 O(1)，遍历查找是主要的耗时点，时间复杂度为 O(n)<br>根据上面讲过的加法法则，删除“值等于给定值”结点对应的链表操作的总时间复杂度为 O(n)</p><p>第二种情况：<br>找到要删除的结点后，删除某个结点 q 需要知道它的前驱结点，单链表并不支持直接获取前驱结点，所以要找到前驱结点，还是要从头结点开始遍历链表，找到 P-&gt;next = q ，说明 p 是 q 的前驱结点<br>对于双向链表而言，就不用这么复杂，找到结点后就知道它的前驱结点是谁，因为双向链表的结点中有保存前驱结点的指针</p><p>修改操作也是一样的，单向链表需要 O(n) 的时间复杂度，而循环链表只需要 O(1) 的时间复杂度，</p><p>对于有序链表，双向链表在查询时也有很大优势，在查询时，可以记录上次查询的位置 q ，每次查询，根据要查找的值与 p 的大小关系，决定往前还是往后查找，只需查询一半的数据</p><p>在实际开发中，双向链表虽然很费内存，但还是比单链表应用更广泛。java 语言的 LinkedHashMap 容器底层，就用到双向链表这种数据结构。</p><p>两个重要思想：</p><p>空间换时间的设计思想：当内存空间十分充足，如果追求代码的运行速度，就可以选择空间复杂度高，时间复杂度低的算法或者数据结构。</p><p>时间换空间的设计思想：内存比较紧缺，比如代码运行在手机或者单片机上。<br>就可以选择空间复杂度低，时间复杂度高的算法或者数据结构。</p><h3 id="双向循环链表"><a href="#双向循环链表" class="headerlink" title="双向循环链表"></a>双向循环链表</h3><p><img src="BJ-suanfa/%E5%8F%8C%E5%90%91%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8.png" alt=""></p><h3 id="数组和链表的区别："><a href="#数组和链表的区别：" class="headerlink" title="数组和链表的区别："></a>数组和链表的区别：</h3><p>数组简单易用，实现上用的是连续的内存空间，可借助 CPU 的缓存机制，预读数组中的数据，访问效率高。<br>但链表在内存中并不是连续存储，对 CPU 缓存不友好，不能有效的预读</p><p>数组的缺点是大小固定，一经声明就要占用整块的连续内存空间。<br>声明的数组过大，系统没有足够的连续内存空间分配给它，导致内存不足。<br>声明的数组过小，不够用，只能申请一个更大的新的数组，进行数据拷贝，而数据拷贝是非常耗时的。<br>链表本身没有大小的限制，支持动态扩容。</p><p>如果代码对内存的使用苛刻，适合使用数组。</p><p><strong>链表和指针容易混淆：</strong></p><ul><li><p>指针或引用的含义</p><p>C 语言有指针的概念，Java  和 Python 没有指针，用引用来代替。实际上这些概念的意思都一样，都是存储所指对象的内存地址</p><p>指针：将某个变量赋值给指针，相当于将这个变量的地址赋值给指针</p><p>比如：p-&gt;next=q 意思就是 p 结点的 next 指针存储了 q 结点的内存地址</p><p>p-&gt;next=p-&gt;next-&gt;next 意思就是 p 结点的 next 指针存储了下下个结点的内存地址</p></li><li><p><strong>指针丢失和内存泄漏</strong></p></li></ul><p>  <img src="BJ-suanfa/%E6%8F%92%E5%85%A5%E7%BB%93%E7%82%B9X.png" alt=""></p><pre class=" language-java"><code class="language-java">  x<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> p<span class="token operator">-</span><span class="token operator">></span>next <span class="token comment" spellcheck="true">//将 x 结点的 next 指针指向 b 结点</span>  p<span class="token operator">-</span><span class="token operator">></span>next <span class="token operator">=</span> x       <span class="token comment" spellcheck="true">//将 p 的 next 指针指向 x 结点</span></code></pre><p>   如果顺序调转过来，就会发生指针丢失和内存泄漏</p><ul><li><p><strong>哨兵简化实现难度</strong></p><p>​        单链表的插入：在结点 P 后面插入一个新的结点</p><pre class=" language-java"><code class="language-java">new_node <span class="token operator">-</span><span class="token operator">></span> next <span class="token operator">=</span> p <span class="token operator">-</span><span class="token operator">></span> nextp <span class="token operator">-</span><span class="token operator">></span> next <span class="token operator">=</span> new_code</code></pre><p>​        但是是有条件的，如果在空链表中插入新结点，那么就是下面这种了</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>    head <span class="token operator">=</span> new_code<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        单链表的删除：删除结点 P 的后继结点</p><pre class=" language-java"><code class="language-java">p <span class="token operator">-</span><span class="token operator">></span> next <span class="token operator">=</span> p <span class="token operator">-</span><span class="token operator">></span> next <span class="token operator">-</span><span class="token operator">></span>next</code></pre><p>​        假如删除链表中的最后一个结点，上面这段代码就行不通</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">-</span><span class="token operator">></span> next <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>    head <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>​        哨兵结点，是用来解决边界问题的，不直接参与业务逻辑</p><p>​        在任何时候，不管链表是不是空， head 指针会一直指向哨兵结点， 这种带有哨兵结点的链表也叫做带头链表。没有哨兵结点的链表就叫做不带头链表</p></li><li><p><strong>重点留意边界条件处理</strong> </p><p>​         经常要检查链表代码是否正确的边界条件有：    </p><ul><li><p>如果链表为空，代码是否能正常工作？</p></li><li><p>如果链表只包含一个结点时，代码是否能正常运行？</p><p>如果链表只包含两个结点时，代码是否能正常运行？</p></li><li><p>代码逻辑在处理头结点和尾结点时，是否正常工作</p><p>不光光是链表代码，任何代码都要考虑边界值或者异常情况</p></li></ul></li><li><p><strong>举例画图，辅助思考</strong></p><p>​        找一个具体的例子，把它画在纸上。比如单链表的插入</p><p><img src="BJ-suanfa/%E5%8D%95%E9%93%BE%E8%A1%A8%E6%8F%92%E5%85%A5.png" alt=""></p></li><li><p><strong>常见的链表操作</strong></p><ul><li>单链表反转</li><li>链表中环的检测</li><li>两个有序的链表合并</li><li>删除链表倒数第 n 个结点</li><li>求链表的中间结点</li></ul></li></ul><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a><strong>栈</strong></h2><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>众所周知，栈是一种“<strong>先进后出</strong>”的数据结构</li><li>从栈的操作特性上看，栈是一种“操作受限”的线性表，只能在一端插入和删除数据</li><li>在功能上，数组或链表确实可以替代栈，但是，特定的数据结构是对特定场景的抽象，数组和链表暴露了太多的操作接口，操作上确实灵活自由，但使用时较不可控</li><li>所以当某个数据集合<strong>只涉及</strong>在<strong>一端插入和删除数据</strong>，并且满足<strong>后进先出、先进后出</strong>的特性，首选“栈”这种数据结构</li></ul><h3 id="实现“栈”"><a href="#实现“栈”" class="headerlink" title="实现“栈”"></a>实现“栈”</h3><ul><li>栈可以使用用<strong>数组</strong>或<strong>链表</strong>实现，<strong>数组</strong>实现的栈叫<strong>顺序栈</strong>，<strong>链表</strong>实现的栈叫<strong>链式栈</strong></li><li>入栈和出栈的实现</li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayStack</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> items<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//数组</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> count<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//栈中元素个数</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> n<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//栈的大小</span>        <span class="token comment" spellcheck="true">//初始化数组，申请一个大小为 n 的数组空间</span>        <span class="token keyword">public</span> <span class="token function">ArrayStack</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//入栈操作</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">push</span><span class="token punctuation">(</span>String item<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//数组空间不够了，直接返回 false , 而且 count + 1</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            items<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>            <span class="token operator">++</span>count<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//出栈操作</span>        <span class="token keyword">public</span> String <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//栈为空，则直接返回 null</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//返回下标为 count-1 的数组元素，并且栈中元素个数 count-1</span>            String tmp <span class="token operator">=</span> items<span class="token punctuation">[</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">--</span>count<span class="token punctuation">;</span>            <span class="token keyword">return</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="时间和空间复杂度的计算"><a href="#时间和空间复杂度的计算" class="headerlink" title="时间和空间复杂度的计算"></a><strong>时间和空间复杂度的计算</strong></h3><ul><li><p>不管时顺序栈还是链式栈，存储数据只要一个大小为 n 的数组。入栈和出栈的过程，临时变量存储空间只用一两个，空间复杂度即为 O(1)</p><p>为什么存储数据用了大小为 n 的数组，空间复杂度不是 O（n）?</p><p>因为 n 这个空间是必须的，不能省掉，所以说空间复杂度，指的是除了原本的数据存储空间外，算法运行时还需要的额外的存储空间</p></li><li><p>时间复杂度的分析，因为入栈和出栈只是涉及到栈顶个别数组的操作，所以时间复杂度为 O(1)</p></li></ul><p><strong>支持动态扩容的顺序栈</strong></p><ul><li><p>想要支持动态扩容的栈，只要底层依赖一个支持动态扩容的数组。栈满之后，就申请一个更大的数组，将原来的数据搬到新数组中。</p></li><li><p>分析动态扩容的顺序栈的入栈、出栈操作时间复杂度</p><p>出栈时，不会涉及到内存的重新申请和数据搬移，出栈的时间复杂度时O(1)。<br>而入栈的时间复杂度分两种情况</p><p>​         在栈的空间充足时，入栈操作的时间复杂度为O(1)。<br>​         在栈的空间不足时，需要重新申请内存和数据搬移，时间复杂度就变成了O(n)</p><p>对于入栈操作，最好的时间复杂度是O(1)，最坏的时间复杂度为 O(n)。平均复杂度为O(1)</p></li></ul><h3 id="栈在函数调用中的应用"><a href="#栈在函数调用中的应用" class="headerlink" title="栈在函数调用中的应用"></a>栈在函数调用中的应用</h3><ul><li><p>栈的应用场景：函数调用栈</p><p>操作系统给每一个线程分配了一块独立内存空间，这内存被称为“栈”这种结构，用来存储函数调用时的临时变量</p><p>每进入一个函数，就会将<strong>临时变量</strong>作为一个栈帧入栈，被调用函数执行完成后，返回之后，这个函数对应的栈帧出栈。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> ret <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> res <span class="token operator">=</span> a <span class="token operator">+</span> ret<span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span> reuturn <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> sum <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="BJ-suanfa/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%A0%88.png" alt=""></p></li></ul><h3 id="栈在表达式求值中的应用"><a href="#栈在表达式求值中的应用" class="headerlink" title="栈在表达式求值中的应用"></a>栈在表达式求值中的应用</h3><ul><li><p>编译器如何利用栈来实现表达式求值 </p><p>比如 3+5*8-6 这个表达式，要通过两个栈区实现，其中一个栈保存操作数，一个栈保存运算符。<br>从左往右遍历表达式，遇到数字，压入操作数栈。<br>遇到运算符，就与运算符栈的栈顶元素比较。如果比运算符栈顶元素的优先级高，就将当前运算符栈压入栈，如果比运算符栈顶元素的优先级低或者相同，从运算符栈中取栈顶运算符，从操作数栈顶取两个操作数，进行计算，再把计算完的结果压入操作数栈，继续比较。图解形式理解</p><p><img src="BJ-suanfa/%E6%A0%88%E5%AE%9E%E7%8E%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.png" alt=""></p></li></ul><h3 id="栈在括号匹配中的运用"><a href="#栈在括号匹配中的运用" class="headerlink" title="栈在括号匹配中的运用"></a>栈在括号匹配中的运用</h3><ul><li><p>假设表达式中只包含三种括号，圆括号()、方括号[]、花括号{}，并且可以任意嵌套。比如， {[{}]}或[{()}([])]等都为合法格式， ， {[}()]或[({)]为不合法的格式 ，检查是否合法</p><p>用栈保存未匹配的左括号，从左到右依次扫描字符串。当扫描到左括号时，则将其压入栈中。当扫描到右括号时，从栈顶取出一个左括号。如果能匹配，比如 “(”跟“)”匹配，“[”跟“]”匹配，“{”跟“}”匹配 ，继续扫描剩下的字符串，遇到不能匹配的，或者栈中没有这个数据，则为非法格式</p></li></ul><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a><strong>队列</strong></h2><h3 id="队列的作用与应用"><a href="#队列的作用与应用" class="headerlink" title="队列的作用与应用"></a>队列的作用与应用</h3><ul><li>有循环队列、阻塞队列、并发队列等等</li><li>在偏底层系统、框架、中间件的开发中，有着关键性作用。</li><li>比如高性能队列 Disruptor、Linux 环形缓存，都用到了循环并发队列； java concurrent 并发包利用 ArrayBlockingQueue 来实现公平锁</li></ul><h3 id="顺序队列"><a href="#顺序队列" class="headerlink" title="顺序队列"></a>顺序队列</h3><ul><li><p>队列和栈一样，队列可以用数组来实现（顺序队列），也可以用链表实现（链式队列）</p></li><li><p>基于数组的实现方法</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">//用数组实现的队列</span>     <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayQueue</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//数组：items，数组大小：n</span>        <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> items<span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//head 表示队头下标，tail 表示队尾下标</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//申请一个大小为 capacity 的数组</span>     <span class="token keyword">public</span> <span class="token function">ArrayQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>        items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>        n <span class="token operator">=</span> capacity<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//入队</span>     <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>String item<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//如果tail == n 表示队列已经满了</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>tail <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         items<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>         <span class="token operator">++</span>tail<span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 出队</span>         <span class="token keyword">public</span> String <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 如果head == tail 表示队列为空</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> tail<span class="token punctuation">)</span>                 <span class="token keyword">return</span> null<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">// 把--操作放到单独一行来写</span>               String ret <span class="token operator">=</span> items<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token operator">++</span>head<span class="token punctuation">;</span>               <span class="token keyword">return</span> ret<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token punctuation">}</span></code></pre><p><img src="BJ-suanfa/%E9%A1%BA%E5%BA%8F%E9%98%9F%E5%88%97%E4%B8%8D%E5%81%9C%E5%85%A5%E9%98%9F%E5%92%8C%E5%87%BA%E9%98%9F.png" alt=""></p><p>随着不停的入队、出队的操作，head 和 tail 都会持续往后移动。当 tail 移动到最后边，即便数组中还有空闲空间，也无法继续往数组中添加数据。</p><p>解决的办法：在出队时不用搬移数据，入队时，集中触发一次的数据搬移操作。出队函数 dequeue() 保持不变，修改入队函数 enqueue() 的实现</p><pre class=" language-java"><code class="language-java">   <span class="token comment" spellcheck="true">//优化后的入队</span>         <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>String item<span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>tail <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                 <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> head<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tail<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>                 items<span class="token punctuation">[</span>i<span class="token operator">-</span>head<span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>             tail <span class="token operator">=</span> tail <span class="token operator">-</span> head<span class="token punctuation">;</span>             head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>         items<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>         <span class="token operator">++</span>tail<span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p><img src="BJ-suanfa/%E9%A1%BA%E5%BA%8F%E9%98%9F%E5%88%97_2.png" alt=""></p></li></ul><h3 id="链式队列"><a href="#链式队列" class="headerlink" title="链式队列"></a>链式队列</h3><p>链表的实现，需要两个指针，head 指针和 tail 指针。分别指向链表的第一个结点和最后一个结点。</p><p>入队时的操作：tail -&gt; next = new_code , tail = tail -&gt; next<br>出队时的操作：head = head -&gt; next</p><p><img src="BJ-suanfa/%E9%93%BE%E5%BC%8F%E9%98%9F%E5%88%97_1.png" alt=""></p><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><p>循环队列避免了用数组实现队列的适合，在 tail == n 时的数据搬移操作</p><p><img src="BJ-suanfa/%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97_1.png" alt=""></p><p>当插入一个新元素的时候，tail 更新为 下标为 0 的位置</p><p>队列为空的判断条件： head = tail<br>队列满的判断条件： (tail+1)%n = head</p><pre class=" language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CircularQueue</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 数组：items，数组大小：n  </span>         <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> items<span class="token punctuation">;</span>             <span class="token keyword">private</span> <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// head 表示队头下标，tail 表示队尾下标  </span>         <span class="token keyword">private</span> <span class="token keyword">int</span> head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token keyword">private</span> <span class="token keyword">int</span> tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">// 申请一个大小为 capacity 的数组  </span>         <span class="token keyword">public</span> <span class="token function">CircularQueue</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>                 items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>                 n <span class="token operator">=</span> capacity<span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token comment" spellcheck="true">// 入队  </span>         <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>String item<span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">// 队列满了    </span>              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tail <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> n <span class="token operator">==</span> head<span class="token punctuation">)</span>                   <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                  items<span class="token punctuation">[</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>              tail <span class="token operator">=</span> <span class="token punctuation">(</span>tail <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>              <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>           <span class="token comment" spellcheck="true">// 出队  </span>         <span class="token keyword">public</span> String <span class="token function">dequeue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 如果head == tail 表示队列为空</span>                 <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> tail<span class="token punctuation">)</span>                      <span class="token keyword">return</span> null<span class="token punctuation">;</span>                  String ret <span class="token operator">=</span> items<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">;</span>                  head <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>                  <span class="token keyword">return</span> ret<span class="token punctuation">;</span>           <span class="token punctuation">}</span>     <span class="token punctuation">}</span></code></pre><h3 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h3><p>队列为空时，从队头取数据会阻塞，除非队列有数据后才返回</p><p>如果队列满了，那么插入数据的操作会被阻塞，直到队列有空闲后再插入数据，再返回</p><p>这是一个“生产者——消费者模型”，当“生产者”产生数据的速度太快，可以调度多几个“消费者”</p><p><img src="BJ-suanfa/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97.png" alt=""></p><h3 id="并发队列"><a href="#并发队列" class="headerlink" title="并发队列"></a>并发队列</h3><p>线程安全的队列叫做并发队列，最简单直接的实现方式时直接在 enqueue()、dequeue() 方式上加锁，锁粒度大并发度较低，同一时刻仅允许一个存在者取操作。基于数组的循环队列，采用  CAS 原子操作，可实现高效的并发队列</p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><h3 id="简单的例子理解递归概念"><a href="#简单的例子理解递归概念" class="headerlink" title="简单的例子理解递归概念"></a>简单的例子理解递归概念</h3><p>周末你带着女朋友去电影院看电影，女朋友问你，咱们现在坐在第几排啊？电影院里面太黑了，看不清，没法数，现在你怎么办？ 别忘了你是程序员，这个可难不倒你，递归就开始排上用场了。</p><p>于是你就问前面一排的人他是第几排，你想只要在他的数字上加一，就知道自己在哪一排了。但是，前面的人也看不清啊，所以他也问他前面的人。就这样一排一排往前问，直到问到第一排的人，说我在第一排，然后再这样一排一排再把数字传回来。直到你前面的人告诉你他在哪一排，于是你就知道答案了。 这就是一个非常标准的递归求解问题的分解过程，去的过程叫“递”，回来的过程叫“归”。</p><p>基本上，所有的递归问题都可以用递推公式来表示。刚刚这个生活中的例 子，我们用递推公式将它表示出来就是这样的 ： f(n)=f(n-1)+1 其中，f(1)=1 </p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="递归要满足的三个条件"><a href="#递归要满足的三个条件" class="headerlink" title="递归要满足的三个条件"></a>递归要满足的三个条件</h3><ul><li><p>一个问题的解可以分解成几个子问题的解<br>子问题就是数据规模更小的问题，比如电影院里，相对于“我在哪一排”，“我前面一排的人在哪一排”就是个数据规模更小的问题，</p></li><li><p>问题与分解之后的子问题，除了数据规模不同，求解思路完全一样</p><p>还是以电影院举例子，问题是“我在哪一排”，分解之后的子问题是“前面一排的人在哪一排”，求解思路一样</p></li><li><p>存在递归终止条件</p><p>子问题不能无限循环下去，电影院的例子，递归的终止条件就是，第一排的人知道自己在第一排，f(1) = 1;</p></li></ul><h3 id="编写递归代码"><a href="#编写递归代码" class="headerlink" title="编写递归代码"></a>编写递归代码</h3><p><strong>步骤：</strong>写出递推公式 ——&gt;  找到终止条件，将递推公式转化代码</p><p><strong>题目：</strong> 假如这里有n个台阶，每次你可以跨1个台阶或者2个台阶，请问走这n个台阶有多少种走法？</p><p><strong>思路：</strong>根据第一步走的台阶进行分类，第一类是第一步走了一个台阶，<br>第二类就是第一步走了两个台阶。n 个台阶的走法就等于先走 1 阶后，n-1 个台阶的走法加上先走 2 阶后 n-2 个台阶的走法。<br>即是： f(n) = f(n-1) + f(n-2)</p><p><strong>接下来就是找到终止条件，什么情况下不用递归了？</strong><br>很明显，当只有一个台阶时，就没必要去递归了。担心递归条件不够充足，那就可以用 n=2，n=3 试验一下。<br>当 n = 2 时，f(2) = f(1) + f(0)。但 f(0) 显得不符合逻辑思维。</p><p>所以递归的终止条件是  f(1)  = 1，f(2) = 2</p><p>总结一下：<br>f(1) = 1；<br>f(2) = 2；<br>f(n) = f(n-1) + f(n-2)；</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="递归代码要警惕堆栈溢出"><a href="#递归代码要警惕堆栈溢出" class="headerlink" title="递归代码要警惕堆栈溢出"></a>递归代码要警惕堆栈溢出</h3><p>堆栈溢出，会造成系统性崩溃，后果很严重</p><p>对于栈，函数调用会使用栈来保存临时变量。每调用一个函数，会将临时变量封装栈帧压入内存栈，等函数执行完成返回时，出栈。<br>系统栈或者虚拟机栈空间一般不大，如果递归求解的数据规模很大，调用层数很深，一直压入栈，会有堆栈溢出的风险。</p><p><strong>如何避免堆栈溢出：</strong>通过代码中限制递归调用的最大深度的方式来解决，给定一个深度界限，比如递归调用超过一定深度后，就不继续向下递归，而是直接抛出异常</p><h3 id="递归代码要警惕重复计算"><a href="#递归代码要警惕重复计算" class="headerlink" title="递归代码要警惕重复计算"></a>递归代码要警惕重复计算</h3><p>假如这里有n个台阶，每次你可以跨1个台阶或者2个台阶，请问走这n个台阶有多少种走法？</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>上面这段代码，明显有重复计算的累赘性</p><p>想要避免这种情况，通过一个数据结构来保存，已经求解过的 f(k) 。</p><p>当递归调用到 f(k) ，从数据结构中看下，是否已经计算过这个值，若有，直接调用<br>改造后：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>hasSolveList<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> hasSolveList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hasSolveList<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在时间效率上，递归代码上多了函数调用，当函数调用的数量很大，时间成本会很高。<br>空间复杂度，因为递归每调用一次就会在内存栈中保存一次现场数据，所以分析递归代码空间复杂度，需要额外考虑这部分，电影院递归代码，空间复杂度不是 O(1)，而是 O(n)。</p><h3 id="将递归代码改写成非递归代码"><a href="#将递归代码改写成非递归代码" class="headerlink" title="将递归代码改写成非递归代码"></a>将递归代码改写成非递归代码</h3><p>递归代码：表达力强，简洁。<br>但是空间复杂度高，有栈堆溢出的风险，有重复计算、过多的函数调用会耗时多等问题。</p><p>电影院的例子改成非递归的代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ref <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        ref <span class="token operator">=</span> ref <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ref<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>第二个例子也可以改成非递归的实现方式：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ref <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> before <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> beforebefore <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>        ref <span class="token operator">=</span>  before <span class="token operator">+</span> beforebefore<span class="token punctuation">;</span>        beforebefore <span class="token operator">=</span> before<span class="token punctuation">;</span>        before <span class="token operator">=</span> ref<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ref<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>所有递归代码都可以改玮这种迭代循环的非递归写法，递归本身是借助栈实现的，但是这种思路只是将递归变成了“手动递归”，本质没变，徒增实现复杂度</p><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a><strong>排序</strong></h2><h3 id="排序算法执行效率"><a href="#排序算法执行效率" class="headerlink" title="排序算法执行效率"></a>排序算法执行效率</h3><p>从以下几方面分析</p><ul><li><p>最好情况、最坏情况、平均时间复杂度</p><p>有些排序算法会进行区分；</p><p>对于要排序的数据，有的接近无序，有的接近有序，有的完全无序</p></li><li><p>时间复杂度的系数、常数、低阶</p><p>时间复杂度反应的是数据规模 n 很大的时候，可以忽略系数、常数、低阶，但实际开发中，面对的可能是数据规模小的数字</p></li><li><p>比较次数和移动（或交换）次数</p><p>基于比较的排序算法，一种是元素比较大小，一种是元素交换或者移动</p></li></ul><h3 id="排序算法的内存消耗"><a href="#排序算法的内存消耗" class="headerlink" title="排序算法的内存消耗"></a>排序算法的内存消耗</h3><ul><li>算法的内存消耗通过空间复杂度衡量，排序算法也如此</li><li>原地排序算法：特指空间复杂度为 O(1)</li></ul><h3 id="排序算法的稳定性"><a href="#排序算法的稳定性" class="headerlink" title="排序算法的稳定性"></a>排序算法的稳定性</h3><p>凭借着执行效率和内存消耗衡量排序算法的好坏是不够的，还得看看算法的稳定性。简单来说，就是<strong>一组数组中相同的数字</strong>，在<strong>排序前</strong>和<strong>排序后</strong>的<strong>前后顺序是否改变</strong>，如果<strong>改变</strong>了，就是<strong>不稳定</strong>的，<strong>没改变</strong>，就是<strong>稳定</strong>的一个算法。</p><p>在实际开发中，我们要排序的不是整数，而是一组对象，要按照对象的某个 key 进行排序。</p><p>比如，现在给电商系统中的 “订单” 排序，订单有两个属性，订单时间，金额。<br>金额从小到大进行排序，对于金额相同的订单，按照订单时间从早到晚排序。</p><p>实现思想：借助稳定排序算法，先按照订单时间进行排序，排序完后使用稳定排序算法对金额进行排序。这样可以保证，相同的金额的订单保持着下单时间从早到晚的排序</p><p><img src="BJ-suanfa/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95.png" alt=""></p><h3 id="常见的排序"><a href="#常见的排序" class="headerlink" title="常见的排序"></a>常见的排序</h3><ul><li>冒泡排序、插入排序、选择排序【时间复杂度：O (n²)】</li><li>快速排序、归并排序  【时间复杂度：O(nlogn)】</li><li>桶排序、技术排序，基数排序  【时间复杂度 O(n)】</li></ul><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><ul><li><p>冒泡排序只会操作相邻的两个数据</p></li><li><p>每次冒泡操作对相邻的两个元素进行比较，看是否满足大小关系要求</p></li><li><p>不满足就互换元素，每一次的冒泡至少有一个元素交换位置，重复 n 次，就完成了 n 个数据的排序工作。</p></li><li><p>比如：对 4，5，6，3，2，1 从小到大进行排序。</p><p>冒泡操作的详细过程：</p><p><img src="BJ-suanfa/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F_1.png" alt=""></p><p><strong>代码实现：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BubbleSortOne</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints1 <span class="token operator">=</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>ints<span class="token punctuation">,</span> ints<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>ints1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//冒泡排序，a 表示数组，n 表示数组大小</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//设置一个何时终止冒泡的值</span>            <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                    flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//跳出循环的条件</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>分析冒泡排序：</p><ul><li><p>冒泡排序涉及相邻数据交换，使用了常量级的临时空间，空间复杂度为 O（1），所以是一个原地排序的算法</p></li><li><p>冒泡排序面对相同的两个元素时，不会交换，在排序前和排序后，相同的两个元素前后位置没有发生改变，所以是稳定的排序算法</p></li><li><p>时间复杂度：</p><p>最好的时间复杂度为 O(n)。比如：1，2，3，4，5，6，一次冒泡排序即可。</p><p>最坏的时间复杂度为 O(n²)。比如：6，5，4，3，2，1，要进行 n 次的冒泡排序</p></li><li><p>平均复杂度的分析：平均复杂度就是加权平均期望时间复杂度，结合概率论的知识分析对于冒泡排序会比较复杂。</p></li><li><p>通过 “有序度“ 和 “逆序度”分析：</p><p>有序元素对：a[i] &lt;=  a[j]，如果 i &lt; j</p><p>对于一个倒序的数组，比如：6,5,4,3,2,1   有序度为：0</p><p>对于完全有序的数组，比如：1,2,3,4,5,6   </p><p>有序度为：n*(n-1)/2，就是15，这种完全有序的数组的有序度叫做满有序度</p></li><li><p>逆序度的定义正好跟有序度相反（默认从小到大）</p><p>逆序度 = 满有序度 - 有序度</p><p>比如：要排序的数组的初始状态是：4,5,6,3,2,1。</p><p>其中，有序元素队有（4,5），（4，6），（5，6）</p><p>有序度为3。n =6，排序完成后终态的满有序度：n*(n-1)/2 = 15</p><p><img src="BJ-suanfa/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F_2.png" alt=""></p></li><li><p>冒泡排序包含两个操作原子，比较和交换。交换一次，有序度加一。交换的次数是确定的，n*(n-1)/2 - 初始有序度，15 - 3 = 12</p><p>对于包含 n 个数据的数组进行冒泡排序，平均交换次数是多少呢？最坏情况下，初始状态的有序度为 0 ，要进行 n(n-1)/2次交换。最好情况下，初始状态的有序度为 n(n-1)/2，不需要。</p><p>中间值为：n*(n-1)/4，平均情况下，需要继续n(n-1)/4次交换操作，比较操作比交换操作多，复杂度上次为 O(n²)，平均情况下的时间复杂度为O(n²)。</p></li></ul></li></ul><h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><ul><li><p>要向一组有序的数组里，插入一个数据，如何做？</p><p>遍历整个数组，找到这个数相应位置，进行插入</p></li><li><p>动态排序：动态地往有序集合中添加数组，通过这种方法保持集合中的数据有序。</p></li><li><p>插入排序如何借助动态排序思想实现排序：</p><p>首先，将数据中的数据分为两个区间，<strong>已排序区间</strong>和<strong>未排序区间</strong>。初始已排序区间只有一个元素，是数组的第一个元素。</p></li><li><p>插入算法核心：将<strong>未排序区间</strong>中的<strong>元素</strong>，在<strong>已排序区间</strong>中找到<strong>合适的位置</strong>插入位置将其<strong>插入</strong>，并保证<strong>已排序区间</strong>数据一直<strong>有序</strong>。</p><p><img src="BJ-suanfa/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F_1.png" alt=""></p></li><li><p>插入排序包含两种操作：</p><p><strong>元素比较</strong>：我们将一个数据 a 插入已排序区间时，要将 a 与已排序区间的元素比较大小，找到合适的插入位置后，就进行元素移动</p><p><strong>元素移动</strong>：将插入点之后的元素都往后面移动一位</p><p>对于从头到尾，从尾到头，元素的比较次数是有区别的，但是<strong>移动次数总是固定的</strong>，就<strong>等于逆序度</strong></p><p><img src="BJ-suanfa/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F_2.png" alt=""></p><p>满有序度：n(n-1)/2 = 15 ，初始有序度是5，逆序度为10</p><p>移动个数总和为 3 + 3 + 4 =  10 = 逆序度</p><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// a 表示数组，n 表示数组大小</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> value <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//查找插入的位置</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span>j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//数据移动</span>                    a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//插入数据</span>            a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><ul><li><p>插入算法是<strong>原地排序算法</strong></p><p>插入排序算法不需要额外的存储空间，空间复杂度为 O(1)</p></li><li><p>插入排序是<strong>稳定的排序算法</strong></p><p>对于值相同的元素，后出现的那些值相同的元素排序后，插入到前面值相同的元素的后面，排序前后的原有的前后顺序不变</p></li><li><p>插入排序的<strong>时间复杂度</strong></p><p><strong>最好时间复杂度：</strong>如果排序的数据是有序的，并不需要搬移数据。假如<strong>从尾部到头部在有序数据中插入位置，只需要比较一个数据即可，这种情况下最好的时间复杂度为O(n)</strong></p></li></ul></li></ul><pre><code>**最坏时间复杂度：**如果数组是倒序的，每次插入都要在数组的第一个位置插入新的数据，也就是 O(n²)  **平均时间复杂度：**在数组中，插入一个数据的平均复杂度为O(n)。插入排序中，需要进行 n 次的插入操作，平均复杂度为 O(n²)</code></pre><h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><ul><li><p>每次会从未排序区间中找到最小的元素放到已排序区间的末尾</p><p><img src="BJ-suanfa/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F_1.png" alt=""></p></li><li><p><strong>空间复杂度为 O(1)</strong>，是<strong>原地排序算法</strong>。<strong>最好、最坏、平均状况时间复杂度为O(n²)</strong>    </p></li><li><p><strong>不是稳定的排序算法</strong>，因为每次排序找的是最小值，并且和前面的元素交换了位置，破坏了稳定性</p><p>比如：1，2，1，0，5，第一次找到最小元素0，与第一个元素交换位置，数组中两个 “1” 的前后顺序就变了，不稳定排序算法</p></li></ul><h4 id="插入排序比冒泡排序受欢迎的缘由"><a href="#插入排序比冒泡排序受欢迎的缘由" class="headerlink" title="插入排序比冒泡排序受欢迎的缘由"></a>插入排序比冒泡排序受欢迎的缘由</h4><ul><li><p>相同点：冒泡排序和插入排序的时间复杂度都是 O(n²)，都是原地排序算法；不管怎么优化，元素的移动次数都是等于原始数据的逆序度</p></li><li><p>不同点：代码实现方面，冒牌排序进行的数据交换要比插入排序更为复杂，冒泡排序需要进行<strong>三个赋值操作</strong>，而插入排序只需要进行<strong>一个赋值操作即可</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//冒泡排序中数据的交换操作：</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 交换</span> <span class="token keyword">int</span> tmp <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//插入排序中数据的移动操作：</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span> a<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 数据移动</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p>如果把执行一个赋值语句记为单位时间，分别用冒泡排序和插入排序对同一个逆序度为 K 的数组进行排序</p><p>冒泡排序：需要进行 K 次操作，一次操作要执行三个赋值语句，交换总耗时为：3 * K</p><p>插入排序：需要进行 K 次操作，一次操作执行一个数据移动语句，交换总耗时： K</p><table><thead><tr><th></th><th align="center">是否原地排序</th><th align="center">是否稳定</th><th>最好</th><th>最坏</th><th>平均</th></tr></thead><tbody><tr><td><strong>冒泡排序</strong></td><td align="center">√</td><td align="center">√</td><td>O(n)</td><td>O(n²)</td><td>O(n²)</td></tr><tr><td><strong>插入排序</strong></td><td align="center">√</td><td align="center">√</td><td>O(n)</td><td>O(n²)</td><td>O(n²)</td></tr><tr><td><strong>选择排序</strong></td><td align="center">√</td><td align="center">×</td><td>O(n²)</td><td>O(n²)</td><td>O(n²)</td></tr></tbody></table></li></ul><h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><ul><li><p>归并排序的核心思想：要排序一个数组，我们把数组从中间分成前后部分，然后对前后两部分分别排序 ，再把排序好的两部分合并在一起，数组就有序了。</p></li><li><p>归并排序使用的是分治思想，把大问题分成小问题，小问题解决了，大问题也就解决了，而分治算法一般都是用递归实现的，分治是一种解决问题的处理思想，递归是一种编程技巧。</p></li><li><p>递归的步骤：</p><ul><li>分析递推公式</li><li>找到终止条件</li><li>将递推公式翻译成递归代码</li></ul></li><li><p>归并排序的递推公式：</p><p>merge_sort(p..r) = merge(merge_sort(p..q) ,merge_sort(q+1…r))</p><p>merge_sort(p..r)表示，将下标从 p 到 r 的数组进行排序，将排序问题转化成了两个子问题，merge_sort(p..q), merge_sort(q+1…r))。其中下标 q 等于 p 和 r 的中间位置，也就是(p+r)/2。当下标从 p 到 q 和从  q+1 到 r 这两个子数组都排序之后，再合并两个子数组，那么 p 到 r 的数据也就排序完了。</p><p>归并排序的终止条件：</p><p>p &gt;=  r </p><p>伪代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 归并排序算法, A是数组，n表示数组大小</span><span class="token function">merge_sort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">merge_sort_c</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 递归调用函数</span><span class="token function">merge_sort_c</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> p<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 递归终止条件</span> <span class="token keyword">if</span> p <span class="token operator">>=</span> r then <span class="token keyword">return</span> <span class="token comment" spellcheck="true">// 取p到r之间的中间位置q</span> q <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">+</span>r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token comment" spellcheck="true">// 分治递归</span> <span class="token function">merge_sort_c</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span> <span class="token function">merge_sort_c</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> q<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 将A[p...q]和A[q+1...r]合并为A[p...r]</span>  <span class="token function">merge</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>p<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>p<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>q<span class="token punctuation">]</span><span class="token punctuation">,</span> A<span class="token punctuation">[</span>q<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p> merge(A[p…r], A[p…q], A[q+1…r]) 这个函数的作用就是，将已经有序的A[p…q]和A[q+1…r] 合并成一个有序的数组，并且放入 A[p…r] </p></li></ul><p>  <strong>过程图解：</strong></p><p>  <img src="BJ-suanfa/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F_1.png" alt=""></p><p>  申请一个临时数组，大小与 A[p..r] 相同。我们用两个游标 i 和 j ，分别指向 A[p..q] 和 A[q+1..r]的第一个元素。比较这个两个元素 A[i] 和 A[j] ，如果 A[i ] &lt;= A[j]，放进临时数组  tmp，i 后移一位，否则 A[j] 放入数组 tmp， j 后移一位。</p><p>  继续上述比较过程，直到其中一个子数组中的所有数据都放入临时数组中，再把另一个数组中的数据依次加入到临时数组的末尾 </p><p>  最终将临时数组 tmp 的数据拷贝到原数据 A[p..r] 中</p><p>  <strong>代码的实现：</strong></p><pre class=" language-java"><code class="language-java">   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//新建临时数组进行存放</span>          <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/**        *         * @param arr 原始数组        * @param low 第一个元素        * @param mid 中间元素        * @param high 最后一个元素        * @param tmp 临时数组        * @Return void        * @author XiaoXin        * @date 2020/5/9 15:10         */</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> mid<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmp<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//左边序列</span>          <span class="token keyword">int</span> j <span class="token operator">=</span> low<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//右边序列起始索引</span>          <span class="token keyword">int</span> k <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">//</span>              <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  tmp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                  tmp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token punctuation">}</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//如果左边还有剩余，则将其全部拷贝进 tmp[] 中</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span><span class="token punctuation">{</span>              tmp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//如果右边还有剩余，则将其全部拷贝进 tmp[] 中</span>          <span class="token keyword">while</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>              tmp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">//将 tmp 中的数组拷贝回原数组中</span>          <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>              arr<span class="token punctuation">[</span>low <span class="token operator">+</span> t<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tmp<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//对左边索引进行排序</span>              <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>low<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//对右边索引进行排序</span>              <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>high<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//合并索引</span>              <span class="token function">merge</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>low<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>high<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span></code></pre><ul><li><p><strong>归并排序的性能分析：</strong></p><p>一、是不是稳定的排序算法？</p><p>主要看的是 merge() 函数，也就是两个有序子数组合并成一个有序数组的部分代码，合并过程中，如果 A[p..q] 和 A[q+1,r] 之间有相同元素，先把 A[p..q] 的元素放入 tmp 数组，这样相同的元素在合并前后的先后顺序不变。所以，它是一个稳定的排序算法</p></li></ul><p>  二、归并排序的时间复杂度</p><p>  前面有提到归并排序，分治思想，其实也就是递归嘛。如何分析递归的时间复杂度</p><p>  递归的使用场景：问题 a 能分解成多个子问题 b 、c ，那求解问题 a 就可以分解为求解问题 b 、c 。问题 b 、 c 解决后，将 b 、c 的结果合并成 a 的结果</p><p>  假如定义求解问题 a 的时间是 T(a)，求解问题 b 、c 的时间分别为 T(b) 和 T(c)，即是：T(a) = T(b) + T(c) + K</p><p>  其中 K 等于将两个子问题 b 、c  的结果合并成问题 a 的结果所消耗的时间</p><p>  将归并排序套入其中</p><p>  假设对 n 个元素进行归并排序所需要的时间为 T(n) ，分解成左右索引进行排序的时间为 T(2/n)。merge() 函数合并两个有序子数组的时间复杂度为 O(n).</p><p>  归并排序的时间复杂度的计算公式就是：</p><p>  T(1) = C;        n=1  需要常量级的执行时间，为 C</p><p>  T(n) = 2*T(2/n) + n;         n&gt;1</p><pre><code>  T(n) = 2*T(n/2) + n   = 2*(2*T(n/4) + n/2) + n = 4*T(n/4) + 2*n   = 4*(2*T(n/8) + n/4) + 2*n = 8*T(n/8) + 3*n   = 8*(2*T(n/16) + n/8) + 3*n = 16*T(n/16) + 4*n   ......   = 2^k * T(n/2^k) + k * n</code></pre><p>   当 T(n/2^k)=T(1) 时，也就是 n/2^k=1，我们得到 k=log2n 。 </p><p>  K代入上面的公式，T(n) = Cn +  nlog2n  (2是小2，log2n)</p><p>  T(n)就等于O(nlogn)。所以归并排序的时间复杂度是O(nlogn)。  </p><p>  归并排序的执行效率与数组是否有序无关，所以最好、最坏、平均情况，复杂度都是O(nlogn)。</p><p>  <strong>三、归并排序的空间复杂度</strong></p><p>  由于在合并两个有序数组为一个有序数组的时候，需要借助额外的存储空间，因此归并排序并不是一个原地排序算法。</p><p>  在申请额外的存储空间时，因为只是临时的，所以在合并后，这个临时空间就被释放。从 CPU 的角度来说，任意时刻，只有一个函数在运行，只会有一个临时空间在使用。临时空间也不会超过 n 个数据的大小。空间复杂度为 O(n)</p><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><ul><li><p>快排使用的也是分治思想。</p></li><li><p>快速排序的思想：假如给定一组 a  到  c 的数据，对它们进行排序，我们首先要找到 a 到 c 中任意一个数据作为 pivot (节点)，把小于 pivot 的放到左边去，把大于 pivot 的放到右边去，pivot 放在中间。这样就可以分成了三个区域，a 到 b-1 之间为小于 pivot 的，pivot 为一个区域，b + 1 到 c 之间为大于 pivot 的</p></li></ul><p>  <img src="BJ-suanfa/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F_1.png" alt=""></p><ul><li><p>根据分治，递归的思想，先用递归排序，如图，我们可以用递归排序下标从 p 到 q - 1 的数据和下标从 q + 1 到 r 之间的数据，直到区间缩小为 1 ，说明数据有序。</p></li><li><p>递推公式：</p><p>quick_sort(p..r) = quick_sork(p..q-1) + quick_sork(q+1..r)</p></li><li><p>终止条件：</p><p>p &gt;= r</p><p>转换成伪代码实现</p><pre class=" language-java"><code class="language-java">         <span class="token comment" spellcheck="true">// 快速排序，A是数组，n表示数组的大小</span>        <span class="token function">quick_sort</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">quick_sort_c</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 快速排序递归函数，p,r为下标</span>        <span class="token function">quick_sort_c</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> p<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> p <span class="token operator">>=</span> r then <span class="token keyword">return</span>             q <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> p<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 获取分区点</span>            <span class="token function">quick_sort_c</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token function">quick_sort_c</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> q<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span>        <span class="token punctuation">}</span></code></pre><p>归并排序中有一个 merge() 合并函数，快排用的是 partition() 分区函数。</p><p>partition() 分区函数的作用是随机选择一个元素作为 pivot （一般情况下，选择 p 到 r 区间的最后一个元素），之后对 A[p..r] 分区，函数返回 pivot 下标</p><p>不考虑空间消耗的话，partition()  分区函数可以申请两个临时空间，遍历 A[p..r]，将比 pivot 小的放临时数组 X ，将比 pivot 大的放临时数组 Y，最后合并 X 和 Y 数组复制到 A[p..r]</p></li></ul><p>  <img src="BJ-suanfa/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F_5.png" alt=""></p><p>  这样一来，partition() 函数需要很多额外空间，所以快排就不为原地排序算法。</p><ul><li><p>将快排优化成原地排序算法的话，空间复杂度要为 O(1)，partition（）分区函数不能拥有额外空间，需要在 A[p..r]  里完成分区的操作</p><p>伪代码：</p><pre class=" language-java"><code class="language-java">        <span class="token function">partition</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> p<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>            pivot <span class="token operator">:</span><span class="token operator">=</span> A<span class="token punctuation">[</span>r<span class="token punctuation">]</span>            i <span class="token operator">:</span><span class="token operator">=</span> p            <span class="token keyword">for</span> j <span class="token operator">:</span><span class="token operator">=</span> p to r<span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">do</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot <span class="token punctuation">{</span>                    swap A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> with A<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                    i <span class="token operator">:</span><span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            swap A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> with A<span class="token punctuation">[</span>r<span class="token punctuation">]</span>            <span class="token keyword">return</span> i</code></pre><p>类似于选择排序，我们通过游标 i 将 A[p..r-1] 分成两部分，A [p..i-1] 的元素小于 pivot （已处理区间），A[i..r-1] （未处理区间）。从未处理区间中取元素 A[j] 与 pivot 比较，假如小于 pivot ，就放到已处理区间的后面，即为 A[i]。</p><p>交换：在 O(1) 的时间复杂度内完成插入操作，将 A[i] 和 A[j] 交换，就可以在 O(1) 时间复杂度内将 A[j] 放到下标为 i 的位置</p><p><img src="BJ-suanfa/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F_2.png" alt=""></p><p>由于涉及到交换，在第一次分区操作后，相同的数字交换后，会改变先后顺序的位置，它不是一个稳定的排序算法</p></li></ul><ul><li><p><strong>归并排序与快速排序的区别：</strong></p><p><img src="BJ-suanfa/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F_3.png" alt=""></p></li></ul><table><thead><tr><th align="center"></th><th align="center">归并排序</th><th align="center">快速排序</th></tr></thead><tbody><tr><td align="center">相同</td><td align="center">思想：都用到了分治思想，<br></td><td align="center"></td></tr><tr><td align="center">不同</td><td align="center">处理过程：由上到下，先处理子问题，再合并<br>稳定、非原地排序算法</td><td align="center">处理过程：由下到上，先分区，再处理子问题<br>不稳定，原地排序算法</td></tr></tbody></table><p><strong>快排的时间复杂度：</strong></p><p>最好时间复杂度：O(nlogn)   对应的情况：如果每次刚好能将分区分成两个大小相同的区间，快排的时间复杂度于递推求解公式和归并排序是一致的</p><p>最坏时间复杂度：O(n²)  ，假如给定的数组是排序好的，每次选择最后一个元素作为 pivot ，每次分区得到的两个区间都是不同的，大约要进行 n 次分区，才能完成整个操作，每次分区平均要扫描 n/2 个元素，时间复杂度就从 O(nlogn) 退化成了 O(n²)</p><p>平均复杂度：T(n)在大部分情况下的时间复杂度都可以做到O(nlogn)，只有在极端情况下，才会退化到O(n2)。</p><p>实现代码：</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>temp<span class="token punctuation">,</span>t<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>low <span class="token operator">>=</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        i <span class="token operator">=</span> low<span class="token punctuation">;</span>        j <span class="token operator">=</span> high<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//temp就是基准位</span>        temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//先看右边，依次往左递减</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>temp  <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//再看左边，依次往右递增</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>temp <span class="token operator">>=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//如果满足条件则交换</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                t <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>To be completed…</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://doctor-deng.github.io/BJ-suanfa.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>git执行过程中的一些疑问</title>
      <link>https://doctor-deng.github.io/git-order.html</link>
      <guid>https://doctor-deng.github.io/git-order.html</guid>
      <pubDate>Thu, 07 May 2020 07:08:08 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h2 id=&quot;git执行过程中的一些疑问&quot;&gt;&lt;a href=&quot;#git执行过程中的一些疑问&quot; class=&quot;headerlink&quot; title=&quot;git执行过程中的一些疑问&quot;&gt;&lt;/a&gt;git执行过程中的一些疑问&lt;/h2&gt; &lt;meta name=&quot;description&quot;
          
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="git执行过程中的一些疑问"><a href="#git执行过程中的一些疑问" class="headerlink" title="git执行过程中的一些疑问"></a>git执行过程中的一些疑问</h2> <meta name="description" content="远程有仓库，分支就只有 master。本地仓库，是从远程的 master 上 clone 下来的，然后在本地改好，再 commit  然后 pull 然后 push"><h3 id="情况简介：远程有仓库，分支就只有-master。本地仓库，是从远程的-master-上-clone-下来的，然后在本地改好，再-commit-然后-pull-然后-push"><a href="#情况简介：远程有仓库，分支就只有-master。本地仓库，是从远程的-master-上-clone-下来的，然后在本地改好，再-commit-然后-pull-然后-push" class="headerlink" title="情况简介：远程有仓库，分支就只有 master。本地仓库，是从远程的 master 上 clone 下来的，然后在本地改好，再 commit  然后 pull 然后 push"></a>情况简介：远程有仓库，分支就只有 master。本地仓库，是从远程的 master 上 clone 下来的，然后在本地改好，再 commit  然后 pull 然后 push</h3><h6 id="1、本地的这个是分支，还是是一个本地仓库？"><a href="#1、本地的这个是分支，还是是一个本地仓库？" class="headerlink" title="1、本地的这个是分支，还是是一个本地仓库？"></a>1、本地的这个是分支，还是是一个本地仓库？</h6><p>本地和远程的关系，其实是两个分支，git pull 时已经自动绑定好对应关系了</p><h6 id="2、在远程新建一个分支，然后-pull-下来，本地有分支么？本地的分支是不是远程新建的哪个分支？"><a href="#2、在远程新建一个分支，然后-pull-下来，本地有分支么？本地的分支是不是远程新建的哪个分支？" class="headerlink" title="2、在远程新建一个分支，然后 pull 下来，本地有分支么？本地的分支是不是远程新建的哪个分支？"></a>2、在远程新建一个分支，然后 pull 下来，本地有分支么？本地的分支是不是远程新建的哪个分支？</h6><p>归根到底，本地分支和远程分支是两个东西。远程新建一个分支拉到本地道理一样，是属于复制了一份。</p><h6 id="3、本地仓库与本地分支有什么区别？"><a href="#3、本地仓库与本地分支有什么区别？" class="headerlink" title="3、本地仓库与本地分支有什么区别？"></a>3、本地仓库与本地分支有什么区别？</h6><p>本地分支属于本地仓库，它们之间属于包含关系，一个仓库里可包含很多分支，如果是 tag 的话可分离出独立的仓库</p><p>4、commit 是提交到本地仓库，然后 push ，push 是把所有代码推到远程仓库，还是只是把 commit 的地方推到远程仓库</p><p>push 不是将所有代码都推到远程仓库里，是要通过对比  commit 的记录，如果本地高于远程，就直接把多出来的commit 给弄上去，如果本地的这几个 commit 和<br>远程的 commit 有冲突的部分就 merge  ,然后根据提交时间排序，新建一个  merge 的 commit的记录再提交上去</p><p>5、为什么先 commit ，然后 pull ，然后再 push ，push  会不会把自己改的代码给覆盖掉，远程没有自己修改的代码，pull 之后，会不会覆盖掉我已经改过的代码。那我 push 没意义了</p><p>commit —&gt; pull  —&gt; push 是应对多人合并开发的情况</p><ul><li><p>commit  目的在于告知 git ，这次提交修改了哪些内容</p></li><li><p>pull 的目的在于比较 commit 和远程 commit 的对比记录，git 根据文件的行数进行对比，假如同时操作了某文件的同一行那么就会产生冲突，git 会把这个冲突给标记出来，然后就要问产生冲突的那个人，保留谁的代码。进而 git add &amp;&amp; git commit &amp;&amp; git pull，再次 pull 是防止解决这个冲突的途中，第三者又提交了新的代码进来，那么又要重新执行一遍。</p><p>在没有冲突的时候，pull 直接合并代码了，而不是把代码覆盖掉</p></li><li><p>代码覆盖或丢失情况：程序员 A 和 程序员  B 在 pull 的时候，版本都为 1 ，程序员 A 在本地提交了 2 和 3 的版本，并且推送到远程仓库</p><p>程序员 B 在进行修改时没有 commit ，自己先写了代码，然后进行 pull ，程序员 B 本地版本为 3 ，在 3 的版本修改了程序员 A 写的代码，进而 git pull&amp;&amp; gut push ，远程版本中为4，程序员 A  的代码被覆盖掉，所以要先 commit —&gt; pull  —&gt; push </p></li></ul><p>6、两个不同分支，A 与 B ，A 合并 B 和 B 合并 A，区别在哪？</p><p>唯一区别是 A -&gt; B 时，B 分支上会产生一个 merge_commit 的信息，B 的合并状态而 A 未合并状态，如果没有发生任何改动，执行 B -&gt; A ，直接切过去了，不会生成 merge_commit 的信息</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://doctor-deng.github.io/git-order.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>上传本地项目到 github 的步骤</title>
      <link>https://doctor-deng.github.io/git-commit.html</link>
      <guid>https://doctor-deng.github.io/git-commit.html</guid>
      <pubDate>Wed, 06 May 2020 01:32:37 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h1 id=&quot;上传本地项目到-github-的步骤&quot;&gt;&lt;a href=&quot;#上传本地项目到-github-的步骤&quot; class=&quot;headerlink&quot; title=&quot;上传本地项目到 github 的步骤&quot;&gt;&lt;/a&gt;上传本地项目到 github 的步骤&lt;/h1&gt;&lt;p&gt;1、cd
          
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="上传本地项目到-github-的步骤"><a href="#上传本地项目到-github-的步骤" class="headerlink" title="上传本地项目到 github 的步骤"></a>上传本地项目到 github 的步骤</h1><p>1、cd 进入项目的路径，或者在项目文件夹里鼠标右键 git bush here </p><p>通过</p><pre><code>git init </code></pre><p>把这个文件夹变成 git 可管理的仓库</p><p><img src="git-commit/1.jpg" alt=""></p><p>如果成功了，在文件夹里会出现这个隐藏文件夹。</p><p><img src="git-commit/1_1.jpg" alt=""></p><p>2、</p><p>将该目录下的所有文件都添加到仓库</p><pre><code>git add .</code></pre><p>可以随时通过 git status 查看当前状态</p><pre><code>git status</code></pre><p><img src="git-commit/2.jpg" alt=""></p><p>3、</p><p>添加完仓库，就准备提交了，并在 -m “” 的 “”里写上注释</p><pre><code>git commit -m "注释"</code></pre><p><img src="git-commit/3.jpg" alt=""></p><p>4、连接到远程仓库</p><pre><code>git remote add orgin https://github.com/Doctor-Deng/test_git_commit.git</code></pre><p><img src="git-commit/4.jpg" alt=""></p><p>origin 后面填的是项目的 https 地址</p><p>如果你在 github 上还没新建一个 repository</p><p><img src="git-commit/4_1.png.jpg" alt=""></p><p><img src="git-commit/4_2.png.jpg" alt=""></p><p>5、pull 是为了本地 commit 和远程commit 的对比记录 </p><pre><code>git pull origin master</code></pre><p>​        将代码推送出去</p><pre><code>git push -u origin master</code></pre><p><img src="git-commit/6.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://doctor-deng.github.io/git-commit.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>上传项目到Github遇到的错误（多图预警）</title>
      <link>https://doctor-deng.github.io/git-Error01.html</link>
      <guid>https://doctor-deng.github.io/git-Error01.html</guid>
      <pubDate>Tue, 05 May 2020 13:05:23 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h1 id=&quot;上传项目到Github遇到的错误（多图预警）&quot;&gt;&lt;a href=&quot;#上传项目到Github遇到的错误（多图预警）&quot; class=&quot;headerlink&quot;
          
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="上传项目到Github遇到的错误（多图预警）"><a href="#上传项目到Github遇到的错误（多图预警）" class="headerlink" title="上传项目到Github遇到的错误（多图预警）"></a>上传项目到Github遇到的错误（多图预警）</h1><p>git 的常用操作  review 一下。</p><p>首先，肯定是鼠标右键要上传的项目文件夹里 git bush here </p><p>1、通过 git init 把这个文件夹变成 git 可管理的仓库</p><pre><code>git init</code></pre><p><img src="git-Error01/1.jpg" alt=""></p><p>2、通过 git status 查看当前状态</p><pre><code>git status</code></pre><p><img src="git-Error01/2.jpg" alt=""></p><p>3、通过 git add . 将该目录下的所有文件添加到仓库</p><pre><code>git add .</code></pre><p><img src="git-Error01/3.jpg" alt=""></p><p>4、通过 git commit  -m  “”将项目提交到仓库里，””里面填的是你要注释的内容</p><pre><code>git commit -m ""</code></pre><p><img src="git-Error01/4.jpg" alt=""></p><h3 id="第一个错误：我没连接远程仓库直接就想将内容推送到远程仓库上"><a href="#第一个错误：我没连接远程仓库直接就想将内容推送到远程仓库上" class="headerlink" title="第一个错误：我没连接远程仓库直接就想将内容推送到远程仓库上"></a>第一个错误：我没连接远程仓库直接就想将内容推送到远程仓库上</h3><p>5、我直接就推送到远程仓库</p><pre><code> git push -u origin master</code></pre><p><img src="git-Error01/5.jpg" alt=""></p><h3 id="第二个错误：origin-错误的写成-orgin-，导致后面推送到远程仓库是失败的"><a href="#第二个错误：origin-错误的写成-orgin-，导致后面推送到远程仓库是失败的" class="headerlink" title="第二个错误：origin 错误的写成 orgin ，导致后面推送到远程仓库是失败的"></a>第二个错误：origin 错误的写成 orgin ，导致后面推送到远程仓库是失败的</h3><p>6、连接远程仓库</p><pre><code>git remote add orgin https://github.com/Doctor-Deng/SSM-.git</code></pre><p><img src="git-Error01/6.jpg" alt=""></p><p>7、推送到远程仓库</p><pre><code> git push -u origin master</code></pre><p><img src="git-Error01/7.jpg" alt=""></p><p>8、</p><p><strong>git remote -v：查看远程仓库详细信息，可以看到仓库名称</strong></p><pre><code>git remote -v</code></pre><p><img src="git-Error01/9.jpg" alt=""></p><pre><code>git remote remove orgin</code></pre><p><img src="git-Error01/11.jpg" alt=""></p><p>9、继续重新连接远程仓库</p><pre><code>git remote add orgin https://github.com/Doctor-Deng/SSM-.git</code></pre><p><img src="git-Error01/12.jpg" alt=""></p><h3 id="第三个错误：git-设置了代理，而我没挂代理就推送到远程仓库"><a href="#第三个错误：git-设置了代理，而我没挂代理就推送到远程仓库" class="headerlink" title="第三个错误：git 设置了代理，而我没挂代理就推送到远程仓库"></a>第三个错误：git 设置了代理，而我没挂代理就推送到远程仓库</h3><p>10、推送到远程仓库</p><pre><code>git push -u origin master</code></pre><p><img src="git-Error01/13.jpg" alt=""></p><h3 id="第四个错误：显示我没有合并分支，-本地和远程的文件应该合并后才能上传本地的新文件"><a href="#第四个错误：显示我没有合并分支，-本地和远程的文件应该合并后才能上传本地的新文件" class="headerlink" title="第四个错误：显示我没有合并分支， 本地和远程的文件应该合并后才能上传本地的新文件"></a>第四个错误：显示我没有合并分支， 本地和远程的文件应该合并后才能上传本地的新文件</h3><p>11、推送到远程仓库</p><pre><code>git push -u origin master</code></pre><p><img src="git-Error01/14.jpg" alt=""></p><h3 id="第五个错误：git无法pull仓库refusing-to-merge-unrelated-histories"><a href="#第五个错误：git无法pull仓库refusing-to-merge-unrelated-histories" class="headerlink" title="第五个错误：git无法pull仓库refusing to merge unrelated histories"></a>第五个错误：git无法pull仓库refusing to merge unrelated histories</h3><p>12、 <code>pull</code>是为了本地 commit 和远程 commit 的对比记录 </p><pre><code>git pull origin master</code></pre><p><img src="git-Error01/15.jpg" alt=""></p><p>解决办法：</p><p> 如果合并了两个不同的开始提交的仓库，在新的 git 会发现这两个仓库可能不是同一个，为了防止开发者上传错误，于是就给下面的提示 </p><pre><code>fatal: refusing to merge unrelated histories</code></pre><p>我在 Github 新建一个仓库，写了 License，然后把本地一个写了很久仓库上传。这时会发现 github 的仓库和本地的没有一个共同的 commit 所以 git 不让提交，认为是写错了 origin ，如果开发者确定是这个 origin 就可以使用 –allow-unrelated-histories 告诉 git 自己确定</p><p>遇到无法提交的问题，一般先 pull 也就是使用 git pull origin master 这里的 origin 就是仓库，而 master 就是需要上传的分支，因为两个仓库不同，发现 git 输出 refusing to merge unrelated histories 无法 pull 内容</p><p>因为他们是两个不同的项目，要把两个不同的项目合并，git需要添加一句代码，在 git pull 之后，这句代码是在git 2.9.2版本发生的，最新的版本需要添加 –allow-unrelated-histories 告诉 git 允许不相关历史合并</p><p>假如我们的源是 origin，分支是 master，那么我们需要这样写</p><pre><code>git pull origin master --allow-unrelated-histories</code></pre><p><img src="git-Error01/18.jpg" alt=""></p><p> 如果有设置了默认上传分支就可以用下面代码</p><pre><code>git pull --allow-unrelated-histories</code></pre><p>该方法只解决因为两个仓库有不同的开始点，也就是两个仓库没有共同的 commit 出现的无法提交。如果使用本文的方法还无法提交，需要看一下是不是发生了冲突，解决冲突再提交 </p><p>13、</p><p>最终成功提交</p><pre><code>git pull origin master</code></pre><pre><code>git push -u origin master</code></pre><p><img src="git-Error01/19.jpg" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://doctor-deng.github.io/git-Error01.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>数据库表涉及外键约束的删除</title>
      <link>https://doctor-deng.github.io/Mysql-Error-6.html</link>
      <guid>https://doctor-deng.github.io/Mysql-Error-6.html</guid>
      <pubDate>Tue, 28 Apr 2020 15:45:42 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h1 id=&quot;java-sql-SQLIntegrityConstraintViolationException&quot;&gt;&lt;a href=&quot;#java-sql-SQLIntegrityConstraintViolationException&quot; class=&quot;headerlink&quot;
          
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="java-sql-SQLIntegrityConstraintViolationException"><a href="#java-sql-SQLIntegrityConstraintViolationException" class="headerlink" title="java.sql.SQLIntegrityConstraintViolationException"></a>java.sql.SQLIntegrityConstraintViolationException</h1><p><strong>这个异常在ssm 项目执行删除用户时出现，因为数据库表之间属性有外键约束</strong></p><h3 id="解决方案如下："><a href="#解决方案如下：" class="headerlink" title="解决方案如下："></a>解决方案如下：</h3><h3 id="数据库表的结构："><a href="#数据库表的结构：" class="headerlink" title="数据库表的结构："></a>数据库表的结构：</h3><p><img src="Mysql-Error-6/1_1.jpg" alt=""></p><p><img src="Mysql-Error-6/1_2.jpg" alt=""></p><p><strong>在 Service 层的实现类里面，调整删除 userId 的顺序即可</strong></p><pre class=" language-java"><code class="language-java"> userDao<span class="token punctuation">.</span><span class="token function">delUser_roleById</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span> userDao<span class="token punctuation">.</span><span class="token function">delUserById</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>先删除有外键约束的  users_role  里面的 userId</p><p>再删除主表 user 里面的 userId</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://doctor-deng.github.io/Mysql-Error-6.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>pageHelper的粗心记录</title>
      <link>https://doctor-deng.github.io/PageHelper.html</link>
      <guid>https://doctor-deng.github.io/PageHelper.html</guid>
      <pubDate>Sat, 18 Apr 2020 19:48:32 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h1 id=&quot;pageHelper-是个分页插件&quot;&gt;&lt;a href=&quot;#pageHelper-是个分页插件&quot; class=&quot;headerlink&quot; title=&quot;pageHelper 是个分页插件&quot;&gt;&lt;/a&gt;pageHelper
          
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="pageHelper-是个分页插件"><a href="#pageHelper-是个分页插件" class="headerlink" title="pageHelper 是个分页插件"></a>pageHelper 是个分页插件</h1><p>犯的错误主要是忘记开启分页了，也就是这行代码。</p><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Product<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span>Integer page<span class="token punctuation">,</span>Integer size<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//开启分页</span>        PageHelper<span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> productDao<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>添加这代码前：</p><p><img src="PageHelper/1_1.PNG" alt=""></p><p>不管你选择的数字是多少，每页的数据依然是七条不变</p><p>找出错误，并进行修改后：</p><p><img src="PageHelper/1_2.PNG" alt=""></p><p>分页正常进行。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://doctor-deng.github.io/PageHelper.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>记录粗心的一天</title>
      <link>https://doctor-deng.github.io/Mysql-Error-5.html</link>
      <guid>https://doctor-deng.github.io/Mysql-Error-5.html</guid>
      <pubDate>Sun, 12 Apr 2020 15:45:40 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h1 id=&quot;Spring-Security-登录失败，Did-not-find-handler-method-for-user-findById-do&quot;&gt;&lt;a
          
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Spring-Security-登录失败，Did-not-find-handler-method-for-user-findById-do"><a href="#Spring-Security-登录失败，Did-not-find-handler-method-for-user-findById-do" class="headerlink" title="Spring-Security 登录失败，Did not find handler method for [/user/findById.do]"></a>Spring-Security 登录失败，Did not find handler method for [/user/findById.do]</h1><p>第一次是因为 permission 写成了 perimisson</p><p>附上数据库表格截图</p><p><img src="Mysql-Error-5/2_1.PNG" alt=""></p><p>第二次是因为 role_permission 写成了 role_perimisson</p><p>第三次是因为括号里面的</p><pre class=" language-java"><code class="language-java">select permissionId from role_permission where roleId<span class="token operator">=</span>#<span class="token punctuation">{</span>id<span class="token punctuation">}</span></code></pre><p>写成了</p><pre><code>select * from role_permission where roleId=#{id}</code></pre><p>第四次是因为写成了这个样，检查后发现写  #{id} 时，右括号可能 shift 键没按到</p><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from permission where id in (select permissionId from role_permission where roleId=#{id) )"</span></code></pre><p>第五次检查日志文件，还是发现 BUG 在 IPermissionDao.java 中的 Sql 语句</p><p>上面的代码经过第四次改错之后，变成了这样</p><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from permission where id in (select permissionId from role_permission where roleId=#{id} )"</span></code></pre><p>仔细琢磨了一下，发现是少了个括号，崩溃了</p><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from permission where id in (select permissionId from role_permission where roleId=#{id) )"</span><span class="token punctuation">)</span></code></pre><p>继续运行项目，发现还是有 BUG ，但是这次没有 Error 了，就是不报红色了</p><p>继续查看日志文件</p><p><img src="Mysql-Error-5/1_2.png" alt=""></p><p>发现找不到 find.do 这个方法</p><p>开始一步步，从 jsp界面 ——&gt;  Controller 层的代码 ——&gt; Service 层的实现类 ——&gt; Dao 层的方法名称</p><p>发现 findById 名称都是没问题的</p><p>最后找到 UserController.java</p><p><img src="Mysql-Error-5/1_3.PNG" alt=""></p><p>@RequestMapping没有问题</p><p>再检查 findById 方法里面的 @RequestMapping</p><p><img src="Mysql-Error-5/1_1.png" alt=""></p><p>出大问题，find 少了个 d</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://doctor-deng.github.io/Mysql-Error-5.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>Spring-Security登录失败，无法跳转到指定页面</title>
      <link>https://doctor-deng.github.io/Mysql-Error-4.html</link>
      <guid>https://doctor-deng.github.io/Mysql-Error-4.html</guid>
      <pubDate>Sat, 11 Apr 2020 15:04:40 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h1 id=&quot;Spring-Security-登录失败，无法跳转到指定页面&quot;&gt;&lt;a href=&quot;#Spring-Security-登录失败，无法跳转到指定页面&quot; class=&quot;headerlink&quot; title=&quot;Spring-Security
          
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Spring-Security-登录失败，无法跳转到指定页面"><a href="#Spring-Security-登录失败，无法跳转到指定页面" class="headerlink" title="Spring-Security 登录失败，无法跳转到指定页面"></a>Spring-Security 登录失败，无法跳转到指定页面</h1><p>前言：在进行 SSM 整合的学习时，发现使用 Spring-Security 框架自定义登录界面后无法登录成功，这个 BUG 有点意思，从下午折磨我到晚上，洗澡都还在想是哪方面出了问题，最后刚刚醒悟，终于找出了 BUG 是出现在 db.properties 里面</p><h3 id="简单介绍下-spring-securuty"><a href="#简单介绍下-spring-securuty" class="headerlink" title="简单介绍下 spring-securuty"></a>简单介绍下 <a href="https://projects.spring.io/spring-security" target="_blank" rel="noopener">spring-securuty</a></h3><ul><li>这个框架是用来给登录时提供安全服务的</li><li>提供“认证”，“授权”操作</li><li>“认证”指的是登录时进行一个校验</li><li>“授权”指的是判断用户是否有权限进行登录</li></ul><h3 id="问题缘由"><a href="#问题缘由" class="headerlink" title="问题缘由"></a>问题缘由</h3><p>在编码登录模块的时候，使用 Spring-Security 框架自定义登录界面后，登录总是不成功，总是跳转到登录失败的界面，，一次次比对 sql 语句，数据库中的表信息，还有 spring-security 的配置信息，发现还是没有问题。但还是出现登录失败的情况</p><p><img src="Mysql-Error-4/1_2.jpg" alt=""></p><p><img src="Mysql-Error-4/1_1.PNG" alt=""></p><h3 id="问题分析："><a href="#问题分析：" class="headerlink" title="问题分析："></a>问题分析：</h3><p><strong>第一步</strong>，检查 spring-security.xml 的配置文件，检查跳转界面的语句</p><p>spring-security.xml </p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>security</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/security<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans.xsd    http://www.springframework.org/schema/security    http://www.springframework.org/schema/security/spring-security.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置不拦截的资源 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">security:</span>http</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/login.jsp<span class="token punctuation">"</span></span> <span class="token attr-name">security</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">security:</span>http</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/failer.jsp<span class="token punctuation">"</span></span> <span class="token attr-name">security</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">security:</span>http</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/css/**<span class="token punctuation">"</span></span> <span class="token attr-name">security</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">security:</span>http</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/img/**<span class="token punctuation">"</span></span> <span class="token attr-name">security</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">security:</span>http</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/plugins/**<span class="token punctuation">"</span></span> <span class="token attr-name">security</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--        配置具体的规则        auto-config="true"    不用自己编写登录的页面，框架提供默认登录页面        use-expressions="false"    是否使用SPEL表达式    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">security:</span>http</span> <span class="token attr-name">auto-config</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">use-expressions</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置具体的拦截的规则 pattern="请求路径的规则" access="访问系统的人，必须有ROLE_USER的角色" --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">security:</span>intercept-url</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span> <span class="token attr-name">access</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ROLE_USER,ROLE_ADMIN<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 定义跳转的具体的页面 --></span>        &lt;security:form-login            <span class="token comment" spellcheck="true">&lt;!-- 登录界面 --></span>                login-page="/login.jsp"            <span class="token comment" spellcheck="true">&lt;!-- login.do 是因为用了 spring-mvc 的dispatcherServlet --></span>                login-processing-url="/login.do"                 default-target-url="/index.jsp"            <span class="token comment" spellcheck="true">&lt;!-- 失败后的界面 --></span>                authentication-failure-url="/failer.jsp"            <span class="token comment" spellcheck="true">&lt;!-- 成功后的跳转界面 --></span>                authentication-success-forward-url="/pages/main.jsp"        />        <span class="token comment" spellcheck="true">&lt;!-- 关闭跨域请求 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">security:</span>csrf</span> <span class="token attr-name">disabled</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 退出 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">security:</span>logout</span> <span class="token attr-name">invalidate-session</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">logout-url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/logout.do<span class="token punctuation">"</span></span> <span class="token attr-name">logout-success-url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/login.jsp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">security:</span>http</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 切换成数据库中的用户名和密码 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">security:</span>authentication-manager</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">security:</span>authentication-provider</span> <span class="token attr-name">user-service-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 配置加密的方式            &lt;security:password-encoder ref="passwordEncoder"/>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">security:</span>authentication-provider</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">security:</span>authentication-manager</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置加密类 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>passwordEncoder<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>附上页面目录图</p><p><img src="Mysql-Error-4/3_2.jpg" alt=""></p><p>发现没有问题，<strong>检查下一项。</strong></p><p>检查 Service 的实现类</p><p>UserServiceImpl.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>IUserDao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Role<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>UserInfo<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>service<span class="token punctuation">.</span>IUserService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>authority<span class="token punctuation">.</span>SimpleGrantedAuthority<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span>User<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span>UserDetails<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>security<span class="token punctuation">.</span>core<span class="token punctuation">.</span>userdetails<span class="token punctuation">.</span>UsernameNotFoundException<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Service<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Transactional<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author XiaoXin * @title: UserServiceImpl * @projectName xiaoxin_ssm * @description: TODO * @date 2020/4/11 14:49 */</span><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IUserService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> IUserDao userDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> UserDetails <span class="token function">loadUserByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token keyword">throws</span> UsernameNotFoundException <span class="token punctuation">{</span>        UserInfo userInfo <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            userInfo <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">findByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//处理自己的用户对象封装成 UserDetails</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"{noop}"</span> <span class="token operator">+</span> userInfo<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> userInfo<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token function">getAuthority</span><span class="token punctuation">(</span>userInfo<span class="token punctuation">.</span><span class="token function">getRoles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//作用就是返回一个List集合，集合中装入的是角色描述</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>SimpleGrantedAuthority<span class="token operator">></span> <span class="token function">getAuthority</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Role<span class="token operator">></span> roles<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>SimpleGrantedAuthority<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Role role <span class="token operator">:</span> roles<span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span><span class="token string">"ROLE_"</span> <span class="token operator">+</span> role<span class="token punctuation">.</span><span class="token function">getRoleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注释的名字 @Service(“userService”) 与 spring-security.xml 中的<br>       &lt;security:authentication-provider user-service-ref=”userService”&gt;  对的上，没有问题</p><p><strong>进一步检查</strong>，是否因为用户没有权限进行登录。</p><p><img src="Mysql-Error-4/2_2.jpg" alt=""></p><p><img src="Mysql-Error-4/2_3.jpg" alt=""></p><p>核实 getAuthority 方法里权限名是否有误。</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>SimpleGrantedAuthority<span class="token operator">></span> <span class="token function">getAuthority</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Role<span class="token operator">></span> roles<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>SimpleGrantedAuthority<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Role role <span class="token operator">:</span> roles<span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleGrantedAuthority</span><span class="token punctuation">(</span><span class="token string">"ROLE_"</span> <span class="token operator">+</span> role<span class="token punctuation">.</span><span class="token function">getRoleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>检查无误后，开始检查 Dao 层的 sql 查询语句</p><p>IUserDao.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>UserInfo<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Many<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Result<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Results<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Select<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from users where username=#{username}"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> property <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"email"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"email"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"phoneNum"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"phoneNum"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"status"</span><span class="token punctuation">,</span> column <span class="token operator">=</span> <span class="token string">"status"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"roles"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">,</span>javaType <span class="token operator">=</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>many <span class="token operator">=</span> <span class="token annotation punctuation">@Many</span><span class="token punctuation">(</span>select <span class="token operator">=</span> <span class="token string">"com.ssm.dao.IRoleDao.findRoleByUserId"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> UserInfo <span class="token function">findByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>IRoleDao.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>dao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>ssm<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Role<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Select<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author XiaoXin * @title: IRoleDao * @projectName xiaoxin_ssm * @description: TODO * @date 2020/4/11 17:00 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRoleDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//根据用户 id 查询出所有对应的角色</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from role where id in (select roleId from users_role where userId=#{userId})"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Role<span class="token operator">></span> <span class="token function">findRoleByUserId</span><span class="token punctuation">(</span>String userId<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>还是没发现问题</p><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>最终修改 db.properity 文件</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">jdbc.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/spring_ssm?serverTimezone=Asia/Shanghai&amp;characterEncoding=utf-8&amp;useSSL=true&amp;useUnicode=true</span><span class="token attr-name">jdbc.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token attr-value">123</span></code></pre><p>往 url 里面多加了一段</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">&amp;useSSL</span><span class="token punctuation">=</span><span class="token attr-value">true&amp;useUnicode=true</span></code></pre><h3 id="残留疑惑："><a href="#残留疑惑：" class="headerlink" title="残留疑惑："></a>残留疑惑：</h3><p>经过反复的测试用例，将 useSSL 和 useUnicode 的值设置成不同，然后进行组合，再重新登录，发现都是可以的。不知道是不是 log4j 日志文件记录了成功的信息，导致不加这两个参数都是可以成功登录的。后期会对 useSSL 和 useUnicode  进行学习</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://doctor-deng.github.io/Mysql-Error-4.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>Mysql查询语句中谨慎加空格</title>
      <link>https://doctor-deng.github.io/Mysql-Error-3.html</link>
      <guid>https://doctor-deng.github.io/Mysql-Error-3.html</guid>
      <pubDate>Thu, 09 Apr 2020 14:35:43 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h1 id=&quot;Mysql查询语句中谨慎加空格&quot;&gt;&lt;a href=&quot;#Mysql查询语句中谨慎加空格&quot; class=&quot;headerlink&quot; title=&quot;Mysql查询语句中谨慎加空格&quot;&gt;&lt;/a&gt;Mysql查询语句中谨慎加空格&lt;/h1&gt;&lt;p&gt;&lt;img
          
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Mysql查询语句中谨慎加空格"><a href="#Mysql查询语句中谨慎加空格" class="headerlink" title="Mysql查询语句中谨慎加空格"></a>Mysql查询语句中谨慎加空格</h1><p><img src="Mysql-Error-3/1_1.png" alt=""></p><p>两条语句之前的区别，就在于框框里面小小的空格，产生了无法找打 Id 的 BUG</p><p>上面的语句是错误的，而下面的语句是正确的</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://doctor-deng.github.io/Mysql-Error-3.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>不小心将Mysql关键字作为表名列名</title>
      <link>https://doctor-deng.github.io/Mysql-Error-2.html</link>
      <guid>https://doctor-deng.github.io/Mysql-Error-2.html</guid>
      <pubDate>Thu, 09 Apr 2020 14:34:33 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h1 id=&quot;不小心将-Mysql-关键字作为表名列名&quot;&gt;&lt;a href=&quot;#不小心将-Mysql-关键字作为表名列名&quot; class=&quot;headerlink&quot; title=&quot;不小心将 Mysql 关键字作为表名列名&quot;&gt;&lt;/a&gt;不小心将 Mysql
          
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="不小心将-Mysql-关键字作为表名列名"><a href="#不小心将-Mysql-关键字作为表名列名" class="headerlink" title="不小心将 Mysql 关键字作为表名列名"></a>不小心将 Mysql 关键字作为表名列名</h1><h3 id="问题缘由："><a href="#问题缘由：" class="headerlink" title="问题缘由："></a>问题缘由：</h3><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from member where id = #{id}"</span><span class="token punctuation">)</span></code></pre><h3 id="异常出现："><a href="#异常出现：" class="headerlink" title="异常出现："></a>异常出现：</h3><pre class=" language-java"><code class="language-java">SQL<span class="token punctuation">]</span>SELECT order from bas_dictionary<span class="token punctuation">[</span>Err<span class="token punctuation">]</span> <span class="token number">1064</span> <span class="token operator">-</span> You have an error in your SQL syntax<span class="token punctuation">;</span> check the manual that corresponds to your MySQL server version <span class="token keyword">for</span> the right syntax to use near <span class="token string">'member from bas_dictionary'</span> at line <span class="token number">1</span></code></pre><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p>在关键字中添加反引号 `</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from `member` where id = #{id}"</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://doctor-deng.github.io/Mysql-Error-2.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>格式化和解析日期的类SimpleDateFormat</title>
      <link>https://doctor-deng.github.io/utils-Date.html</link>
      <guid>https://doctor-deng.github.io/utils-Date.html</guid>
      <pubDate>Wed, 08 Apr 2020 12:57:14 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h1 id=&quot;日期转换成字符串，字符串转换成日期&quot;&gt;&lt;a href=&quot;#日期转换成字符串，字符串转换成日期&quot; class=&quot;headerlink&quot; title=&quot;日期转换成字符串，字符串转换成日期&quot;&gt;&lt;/a&gt;日期转换成字符串，字符串转换成日期&lt;/h1&gt;&lt;h3
          
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="日期转换成字符串，字符串转换成日期"><a href="#日期转换成字符串，字符串转换成日期" class="headerlink" title="日期转换成字符串，字符串转换成日期"></a>日期转换成字符串，字符串转换成日期</h1><h3 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h3><p>根据 JDK API 1.6.0 的资料显示</p><p>public class SimpleDateFormatextends extends DateFormat</p><p><code>SimpleDateFormat</code>是一个以与语言环境有关的方式来格式化和解析日期的具体类。它允许进行格式化（日期 -&gt;  文本）、解析（文本 -&gt; 日期）和规范化。</p><p>下面直接贴出工具类的代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>ParseException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span>SimpleDateFormat<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author XiaoXin * @title: DateUtils * @projectName xiaoxin_ssm * @description: 日期与字符串格式互换的工具类 * @date 2020/4/8 15:35 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateUtils</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//日期转换成字符串</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">date2String</span><span class="token punctuation">(</span>Date date<span class="token punctuation">,</span> String patt<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// SimpleDateFormat 是一个以与语言环境有关的方式来格式化和解析日期的具体类。</span>        <span class="token comment" spellcheck="true">//它允许进行格式化（日期 -> 文本）、解析（文本 -> 日期）和规范化。</span>        SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span>patt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// public final String format(Date date)将一个 Date 格式化为日期/时间字符串。</span>        String format <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> format<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//字符串转换成日期</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Date <span class="token function">string2Date</span><span class="token punctuation">(</span>String str<span class="token punctuation">,</span>String patt<span class="token punctuation">)</span> <span class="token keyword">throws</span> ParseException <span class="token punctuation">{</span>        SimpleDateFormat sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span>patt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// parse 从给定字符串的开始解析文本，以生成一个日期。该方法不使用给定字符串的整个文本。</span>        Date parse <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> parse<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://doctor-deng.github.io/utils-Date.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>随机生成ID的一个工具类</title>
      <link>https://doctor-deng.github.io/utils-UUID.html</link>
      <guid>https://doctor-deng.github.io/utils-UUID.html</guid>
      <pubDate>Wed, 08 Apr 2020 12:57:01 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h1 id=&quot;java-util-下的类-UUID&quot;&gt;&lt;a href=&quot;#java-util-下的类-UUID&quot; class=&quot;headerlink&quot; title=&quot;java.util 下的类 UUID&quot;&gt;&lt;/a&gt;java.util 下的类
          
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="java-util-下的类-UUID"><a href="#java-util-下的类-UUID" class="headerlink" title="java.util 下的类 UUID"></a>java.util 下的类 UUID</h1><p>今天新学到的一个 UUID 类下的 randomUUID() 方法</p><p>根据 JDK API 1.6.0 的文档资料显示，</p><h3 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h3><p>UUID 是用来表示通用唯一标识符 (UUID) 的类。 UUID 表示一个 128 位的值。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">UUIDextends</span> Object <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">,</span> Comparable<span class="token operator">&lt;</span>UUID<span class="token operator">></span></code></pre><h3 id="randomUUID"><a href="#randomUUID" class="headerlink" title="randomUUID"></a>randomUUID</h3><p>public static UUID randomUUID() </p><ul><li><p>获取类型 4（伪随机生成的）UUID 的静态工厂。 使用加密的强伪随机数生成器生成该 UUID。 </p></li><li><p>返回：<br>随机生成的 UUID。</p></li></ul><h3 id="在项目中的应用"><a href="#在项目中的应用" class="headerlink" title="在项目中的应用"></a>在项目中的应用</h3><p>创建一个工具类 UUIDUtils</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>UUID<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author XiaoXin * @title: UUIDUtils * @projectName xiaoxin_ssm * @description: 随机生成 ID * @date 2020/4/8 20:15 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UUIDUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">getUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> uuid<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://doctor-deng.github.io/utils-UUID.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>Library Maven has broken classes path</title>
      <link>https://doctor-deng.github.io/Maven-Error-2.html</link>
      <guid>https://doctor-deng.github.io/Maven-Error-2.html</guid>
      <pubDate>Mon, 06 Apr 2020 15:47:15 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h1 id=&quot;Library-Maven-has-broken-classes-path&quot;&gt;&lt;a href=&quot;#Library-Maven-has-broken-classes-path&quot; class=&quot;headerlink&quot; title=&quot;Library Maven:
          
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Library-Maven-has-broken-classes-path"><a href="#Library-Maven-has-broken-classes-path" class="headerlink" title="Library Maven: has broken classes path:"></a>Library Maven: has broken classes path:</h1><h3 id="问题叙述："><a href="#问题叙述：" class="headerlink" title="问题叙述："></a>问题叙述：</h3><p>今天在整理 ssm 框架的项目时，发现项目里的 web.xml 有冒红的依赖包，鼠标移动上去发现这种错误</p><p>Cannot resolve class or package ‘springframework’ less… (Ctrl+F1) Inspection info:Spring XML mode</p><p>然后打开 File -&gt; Project Structure  -&gt; Problems 发现有问题</p><p>大概像下面这种</p><p><img src="Maven-Error-2%5C1_1.png" alt=""></p><p>（这个因为当时没及时截图，借用了网上的类似的图片，如有侵权，请联系我，及时更改）</p><h3 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h3><p>仔细研究后，发现 Problem 里面的依赖包的路径对不上，于是开始检查</p><p><img src="Maven-Error-2%5C1_2.png" alt=""></p><p>第一步检查 settings file 和 Local repository 的路径有没有问题，发现没问题后</p><p>第二步开始怀疑是不是 pom.xml 里面相关的 springframework 的依赖包没导入成功。</p><p><img src="Maven-Error-2%5C2_1.png" alt=""></p><p><img src="Maven-Error-2%5C2_2.png" alt=""></p><p>发现都没有问题后</p><p>重回第一步检查 Problem 里面的详细内容，然后发现，出现问题的几个依赖包路径不太对，然后在同一个界面里找到 Libraries ，发现有几个红名的</p><p>点进去一看，它们的 Classes 红的彻底</p><p><img src="Maven-Error-2%5C3_2.jpg" alt=""></p><p>正常的路径应该是这样的</p><p><img src="Maven-Error-2%5C3_1.png" alt=""></p><p>细心的你不知道发现了没有，他们两个的区别就在于 5.0.2.. 中的 . </p><p>然后找到相关路径</p><p>真相了</p><p><img src="Maven-Error-2%5C3_3.png" alt=""></p><p>5.0.2..RELEASE 是个什么玩意？</p><p>再重回 File -&gt; Project Structure  -&gt; Libraries 深究（图片是修改错误后的，所以没冒红）</p><p><img src="Maven-Error-2%5C3_4.png" alt=""></p><p>发现类似的错误还有好多个包，都是 5.0.2..RELEASE</p><h3 id="原因分析："><a href="#原因分析：" class="headerlink" title="原因分析："></a>原因分析：</h3><p>启动名侦探柯南模式</p><p>查看“盗版” 5.0.2..RELEASE 和 “正版” 5.0.2.RELEASE 的文件夹时间，我发现了问题。</p><p>“盗版”的文件夹应该是我 maven 没配置阿里云镜像的时候下载的一个失败品，依赖包没下载完成，就留在那里了。</p><p>而 “正版” 的文件夹显然时间上对的上，是成功下载完全的依赖包。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://doctor-deng.github.io/Maven-Error-2.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>IDEA Maven 常见问题</title>
      <link>https://doctor-deng.github.io/Maven-Error.html</link>
      <guid>https://doctor-deng.github.io/Maven-Error.html</guid>
      <pubDate>Wed, 01 Apr 2020 08:28:07 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h1 id=&quot;IDEA-Maven-常见问题&quot;&gt;&lt;a href=&quot;#IDEA-Maven-常见问题&quot; class=&quot;headerlink&quot; title=&quot;IDEA Maven 常见问题&quot;&gt;&lt;/a&gt;IDEA Maven 常见问题&lt;/h1&gt;&lt;h6
          
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="IDEA-Maven-常见问题"><a href="#IDEA-Maven-常见问题" class="headerlink" title="IDEA Maven 常见问题"></a>IDEA Maven 常见问题</h1><h6 id="前言：由于之前的我年少轻狂，版本一定要最新，不新不爽啊！所以在捣鼓-Maven-的时候，一下子就下载了船新版本的-3-6-3。"><a href="#前言：由于之前的我年少轻狂，版本一定要最新，不新不爽啊！所以在捣鼓-Maven-的时候，一下子就下载了船新版本的-3-6-3。" class="headerlink" title="前言：由于之前的我年少轻狂，版本一定要最新，不新不爽啊！所以在捣鼓 Maven 的时候，一下子就下载了船新版本的 3.6.3。"></a>前言：由于之前的我年少轻狂，版本一定要最新，不新不爽啊！所以在捣鼓 Maven 的时候，一下子就下载了船新版本的 3.6.3。</h6><p>害，年少轻狂，现实总会有回报给你的，今天我就遇到了被船新版本当头一击的暴揍。</p><h4 id="问题叙述一："><a href="#问题叙述一：" class="headerlink" title="问题叙述一："></a>问题叙述一：</h4><p>Maven 版本最好用 3.6.2 以下（不包括3.6.2）的，目前的船新版本是 3.6.3。版本过高会带来一些不可避免的问题。</p><p>在 pom.xml 遇到各种变红的时候，你是不是一脸懵逼。</p><p>对的，我也是。懵逼完了，得解决问题啊，找到日志文件</p><p>在 IDEA 工具栏上 找到 Help ，它会指引你前进的方向。好像跑题了，在 Help —&gt; show Log in Explorer</p><pre class=" language-java"><code class="language-java"><span class="token number">2020</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">21</span><span class="token operator">:</span><span class="token number">59</span><span class="token operator">:</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">734</span> <span class="token punctuation">[</span> <span class="token number">415739</span><span class="token punctuation">]</span>   INFO <span class="token operator">-</span> dvertisement<span class="token punctuation">.</span>PluginsAdvertiser <span class="token operator">-</span> Cannot download <span class="token string">'https://plugins.jetbrains.com/plugins/list/?uuid=c56ba196-b869-48ae-8fb4-abaaeb6537d3&amp;build=IU-182.4505.22'</span><span class="token operator">:</span> Read timed out<span class="token punctuation">,</span> response<span class="token operator">:</span> <span class="token number">200</span> OK java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token operator">:</span> Cannot download <span class="token string">'https://plugins.jetbrains.com/plugins/list/?uuid=c56ba196-b869-48ae-8fb4-abaaeb6537d3&amp;build=IU-182.4505.22'</span><span class="token operator">:</span> Read timed out<span class="token punctuation">,</span> response<span class="token operator">:</span> <span class="token number">200</span> OK    at com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>util<span class="token punctuation">.</span>io<span class="token punctuation">.</span>HttpRequests$RequestImpl<span class="token punctuation">.</span><span class="token function">saveToFile</span><span class="token punctuation">(</span>HttpRequests<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">420</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>ide<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>RepositoryHelper<span class="token punctuation">.</span>lambda$loadPlugins$<span class="token function">1</span><span class="token punctuation">(</span>RepositoryHelper<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">151</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>util<span class="token punctuation">.</span>io<span class="token punctuation">.</span>HttpRequests<span class="token punctuation">.</span><span class="token function">doProcess</span><span class="token punctuation">(</span>HttpRequests<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">475</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>util<span class="token punctuation">.</span>io<span class="token punctuation">.</span>HttpRequests<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>HttpRequests<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">451</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>util<span class="token punctuation">.</span>io<span class="token punctuation">.</span>HttpRequests<span class="token punctuation">.</span>access$<span class="token function">100</span><span class="token punctuation">(</span>HttpRequests<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">47</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>util<span class="token punctuation">.</span>io<span class="token punctuation">.</span>HttpRequests$RequestBuilderImpl<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>HttpRequests<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">303</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>ide<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>RepositoryHelper<span class="token punctuation">.</span><span class="token function">loadPlugins</span><span class="token punctuation">(</span>RepositoryHelper<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">129</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>ide<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>RepositoryHelper<span class="token punctuation">.</span><span class="token function">loadPlugins</span><span class="token punctuation">(</span>RepositoryHelper<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">93</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>ide<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>RepositoryHelper<span class="token punctuation">.</span><span class="token function">loadPlugins</span><span class="token punctuation">(</span>RepositoryHelper<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">84</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>ide<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>RepositoryHelper<span class="token punctuation">.</span><span class="token function">loadPluginsFromAllRepositories</span><span class="token punctuation">(</span>RepositoryHelper<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">64</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>openapi<span class="token punctuation">.</span>updateSettings<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>pluginsAdvertisement<span class="token punctuation">.</span>PluginsAdvertiser$<span class="token number">4</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>PluginsAdvertiser<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">301</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>openapi<span class="token punctuation">.</span>application<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>ApplicationImpl$<span class="token number">1</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ApplicationImpl<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">314</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>Executors$RunnableAdapter<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>Executors<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">511</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>FutureTask<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>FutureTask<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">266</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ThreadPoolExecutor<span class="token punctuation">.</span><span class="token function">runWorker</span><span class="token punctuation">(</span>ThreadPoolExecutor<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1142</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>ThreadPoolExecutor$Worker<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>ThreadPoolExecutor<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">617</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">745</span><span class="token punctuation">)</span>Caused by<span class="token operator">:</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>SocketTimeoutException<span class="token operator">:</span> Read timed out    at java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>SocketInputStream<span class="token punctuation">.</span><span class="token function">socketRead0</span><span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>SocketInputStream<span class="token punctuation">.</span><span class="token function">socketRead</span><span class="token punctuation">(</span>SocketInputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">116</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>SocketInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>SocketInputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">171</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>SocketInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>SocketInputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">141</span><span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>security<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>InputRecord<span class="token punctuation">.</span><span class="token function">readFully</span><span class="token punctuation">(</span>InputRecord<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">465</span><span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>security<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>InputRecord<span class="token punctuation">.</span><span class="token function">readV3Record</span><span class="token punctuation">(</span>InputRecord<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">593</span><span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>security<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>InputRecord<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>InputRecord<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">532</span><span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>security<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>SSLSocketImpl<span class="token punctuation">.</span><span class="token function">readRecord</span><span class="token punctuation">(</span>SSLSocketImpl<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">983</span><span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>security<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>SSLSocketImpl<span class="token punctuation">.</span><span class="token function">readDataRecord</span><span class="token punctuation">(</span>SSLSocketImpl<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">940</span><span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>security<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>AppInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>AppInputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">105</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedInputStream<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>BufferedInputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">246</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedInputStream<span class="token punctuation">.</span><span class="token function">read1</span><span class="token punctuation">(</span>BufferedInputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">286</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>BufferedInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>BufferedInputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">345</span><span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>net<span class="token punctuation">.</span>www<span class="token punctuation">.</span>http<span class="token punctuation">.</span>ChunkedInputStream<span class="token punctuation">.</span><span class="token function">fastRead</span><span class="token punctuation">(</span>ChunkedInputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">244</span><span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>net<span class="token punctuation">.</span>www<span class="token punctuation">.</span>http<span class="token punctuation">.</span>ChunkedInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>ChunkedInputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">689</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FilterInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>FilterInputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">133</span><span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>net<span class="token punctuation">.</span>www<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpURLConnection$HttpInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>HttpURLConnection<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">3375</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>util<span class="token punctuation">.</span>io<span class="token punctuation">.</span>CountingGZIPInputStream$CountingInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>CountingGZIPInputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">70</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>zip<span class="token punctuation">.</span>InflaterInputStream<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>InflaterInputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">238</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>zip<span class="token punctuation">.</span>InflaterInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>InflaterInputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">158</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>zip<span class="token punctuation">.</span>GZIPInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>GZIPInputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">117</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FilterInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>FilterInputStream<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">107</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>util<span class="token punctuation">.</span>net<span class="token punctuation">.</span>NetUtils<span class="token punctuation">.</span><span class="token function">copyStreamContent</span><span class="token punctuation">(</span>NetUtils<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">194</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>util<span class="token punctuation">.</span>io<span class="token punctuation">.</span>HttpRequests$RequestImpl<span class="token punctuation">.</span><span class="token function">saveToFile</span><span class="token punctuation">(</span>HttpRequests<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">416</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">16</span> more</code></pre><p>可以发现冒红的那一段，显示读取超时，大概意思就是你在下载依赖包的时候，速度太慢，就取消了。</p><p><strong>解决方案一：</strong><img src="Maven-Error/1_1.jpg" alt=""></p><p><strong>解决方案二：</strong>如果你的版本是 Maven 高于 3.6.2（包括 3.6.2）以上 ，那么先去卸载 Maven ，重新下载个低版本的（低于3.6.1的都可以）。</p><p><strong>Maven 卸载并重装方案：</strong></p><ul><li><p>找到安装的路径，也就是 Maven 安装后的文件夹，直接删除</p></li><li><p>前往 C:\Users\“你的用户名”.m2，删除 .m2 文件夹（因为 .m2 文件夹是隐藏文件夹，所以找不到这个文件夹的，可以按照下图试试）</p><p> <img src="Maven-Error/2_1.png" alt=""></p></li><li><p>环境变量就不用删除先，因为重装后还要配置</p></li></ul><p><strong>Maven 低版本安装方案</strong>：</p><ul><li><p>前往<a href="http://maven.apache.org/docs/history.html" target="_blank" rel="noopener">官网</a> ，找到你想要的版本，继续下载。</p></li><li><p>如果你对版本没有特定需求，你也可以选择我今天重装的 <a href="https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.zip" target="_blank" rel="noopener">Maven 3.5.4</a></p><p>点击就能下载，直接解压。完美使用，一刀999。（不好意思，今天有点跑题了）</p></li><li><p>如果你是重装  Maven 的，那么修改下环境变量的版本号就能使用了<img src="Maven-Error/2_2.jpg" alt=""></p></li></ul><h4 id="问题叙述二："><a href="#问题叙述二：" class="headerlink" title="问题叙述二："></a>问题叙述二：</h4><p>Idea 设置 Maven 配置阿里云镜像</p><p><img src="Maven-Error/3_1.jpg" alt=""></p><p>一定要注意勾上 Override</p><p>在 C:\Users\“你的用户名”.m2 里面新建一个 settings.xml ，添加以下代码</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>settings xmlns<span class="token operator">=</span><span class="token string">"http://maven.apache.org/SETTINGS/1.0.0"</span>          xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>          xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"</span><span class="token operator">></span>  <span class="token operator">&lt;</span>mirrors<span class="token operator">></span>    <span class="token operator">&lt;</span>mirror<span class="token operator">></span>          <span class="token operator">&lt;</span>id<span class="token operator">></span>alimaven<span class="token operator">&lt;</span><span class="token operator">/</span>id<span class="token operator">></span>          <span class="token operator">&lt;</span>name<span class="token operator">></span>aliyun maven<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span>          <span class="token operator">&lt;</span>url<span class="token operator">></span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>maven<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>nexus<span class="token operator">/</span>content<span class="token operator">/</span>groups<span class="token operator">/</span><span class="token keyword">public</span><span class="token operator">/</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">></span>          <span class="token operator">&lt;</span>mirrorOf<span class="token operator">></span>central<span class="token operator">&lt;</span><span class="token operator">/</span>mirrorOf<span class="token operator">></span>              <span class="token operator">&lt;</span><span class="token operator">/</span>mirror<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>mirrors<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>settings<span class="token operator">></span></code></pre><p>然后就配置完成阿里云镜像</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://doctor-deng.github.io/Maven-Error.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>git Clone 很慢，别急，我来了</title>
      <link>https://doctor-deng.github.io/git-proxy.html</link>
      <guid>https://doctor-deng.github.io/git-proxy.html</guid>
      <pubDate>Tue, 31 Mar 2020 12:26:20 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h1 id=&quot;git-clone-github-上的代码异常慢？别担心，git-代理这就来照顾你&quot;&gt;&lt;a href=&quot;#git-clone-github-上的代码异常慢？别担心，git-代理这就来照顾你&quot; class=&quot;headerlink&quot; title=&quot;git clone
          
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="git-clone-github-上的代码异常慢？别担心，git-代理这就来照顾你"><a href="#git-clone-github-上的代码异常慢？别担心，git-代理这就来照顾你" class="headerlink" title="git clone github 上的代码异常慢？别担心，git 代理这就来照顾你"></a>git clone github 上的代码异常慢？别担心，git 代理这就来照顾你</h1><h6 id="首先你得有个-git-吧？没有-git-的可以先去下载个（git-下载安装的过程在各大搜索引擎应该都会有），有了-git-的自行忽略这一条"><a href="#首先你得有个-git-吧？没有-git-的可以先去下载个（git-下载安装的过程在各大搜索引擎应该都会有），有了-git-的自行忽略这一条" class="headerlink" title="首先你得有个  git 吧？没有 git 的可以先去下载个（git 下载安装的过程在各大搜索引擎应该都会有），有了 git  的自行忽略这一条"></a>首先你得有个  git 吧？没有 git 的可以先去下载个（git 下载安装的过程在各大搜索引擎应该都会有），有了 git  的自行忽略这一条</h6><h6 id="最重要的是，你还得有个小梯子才行。"><a href="#最重要的是，你还得有个小梯子才行。" class="headerlink" title="最重要的是，你还得有个小梯子才行。"></a>最重要的是，你还得有个<strong>小梯子</strong>才行。</h6><h4 id="1、不要怂，在你想要-git-clone-的文件夹里，直接点击鼠标右键-Git-Bush-Here"><a href="#1、不要怂，在你想要-git-clone-的文件夹里，直接点击鼠标右键-Git-Bush-Here" class="headerlink" title="1、不要怂，在你想要 git clone 的文件夹里，直接点击鼠标右键 Git Bush Here"></a>1、不要怂，在你想要 git clone 的文件夹里，直接点击<strong>鼠标右键</strong> <strong>Git Bush Here</strong></h4><p><img src="git-proxy/1_1.png" alt=""></p><h4 id="2、开始配置-git-代理配置"><a href="#2、开始配置-git-代理配置" class="headerlink" title="2、开始配置 git 代理配置"></a>2、开始配置 git 代理配置</h4><ul><li><strong>全部 git 仓库</strong>都要走<strong>代理</strong>：<br>git config –global http.proxy 127.0.0.1:7890</li></ul><ul><li><p>只有<strong>从 GitHub 仓库 clone</strong> 的才走代理</p><p>git config –global http.<a href="https://github.com.proxy" target="_blank" rel="noopener">https://github.com.proxy</a> 127.0.0.1:7890</p></li></ul><p><strong>输入  git config -e –global查看配置信息</strong></p><p>我的是已经配置好的 github 仓库 clone 才走代理(进入下面这个界面，常用指令：输入 i 就是插入的意思，写完后输入 :wq 就是保存并退出的意思)</p><p><img src="git-proxy/1_2.jpg" alt=""></p><h4 id="3、如何取消-git-代理"><a href="#3、如何取消-git-代理" class="headerlink" title="3、如何取消 git 代理"></a>3、如何取消 git 代理</h4><ul><li><p>取消国内码云平台 git 代理：</p><p>git config –global –unset http.<a href="https://gitee.com.proxy" target="_blank" rel="noopener">https://gitee.com.proxy</a></p></li></ul><ul><li><p>取消 github 平台的 git 代理：</p><p>git config –global –unset http.<a href="https://github.com.proxy" target="_blank" rel="noopener">https://github.com.proxy</a></p></li></ul><ul><li><p>取消全平台 git 代理：</p><p>git config –global –unset http.proxy</p></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://doctor-deng.github.io/git-proxy.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>记录软件密钥</title>
      <link>https://doctor-deng.github.io/miyao.html</link>
      <guid>https://doctor-deng.github.io/miyao.html</guid>
      <pubDate>Mon, 30 Mar 2020 09:43:16 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;p&gt;各种密钥的记录&lt;/p&gt;
&lt;p&gt; VMware Workstation 15 许可证：&lt;/p&gt;
&lt;p&gt; CG392-4PX5J-H816Z-HYZNG-PQRG2 &lt;/p&gt;
&lt;script&gt;
       
          
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>各种密钥的记录</p><p> VMware Workstation 15 许可证：</p><p> CG392-4PX5J-H816Z-HYZNG-PQRG2 </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://doctor-deng.github.io/miyao.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>暂停</title>
      <link>https://doctor-deng.github.io/PauseUpdates.html</link>
      <guid>https://doctor-deng.github.io/PauseUpdates.html</guid>
      <pubDate>Mon, 23 Mar 2020 14:15:15 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h1 id=&quot;博客暂时暂停更新&quot;&gt;&lt;a href=&quot;#博客暂时暂停更新&quot; class=&quot;headerlink&quot;
          
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="博客暂时暂停更新"><a href="#博客暂时暂停更新" class="headerlink" title="博客暂时暂停更新"></a>博客暂时暂停更新</h1><p>因为感情受到了很大的打击，需要一段时间缓一缓，等心情平复下来，才能再次进行更新，具体更新时间另外通知。</p><p>待解决 BUG：博客还有个图片不显示的 BUG</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://doctor-deng.github.io/PauseUpdates.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>找不到 Jdbc 驱动</title>
      <link>https://doctor-deng.github.io/jdbc-Error.html</link>
      <guid>https://doctor-deng.github.io/jdbc-Error.html</guid>
      <pubDate>Tue, 17 Mar 2020 12:33:45 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h1 id=&quot;Cannot-find-class-com-mysql-cj-jdbc-Driver&quot;&gt;&lt;a href=&quot;#Cannot-find-class-com-mysql-cj-jdbc-Driver&quot; class=&quot;headerlink&quot; title=&quot;Cannot
          
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Cannot-find-class-com-mysql-cj-jdbc-Driver"><a href="#Cannot-find-class-com-mysql-cj-jdbc-Driver" class="headerlink" title="Cannot find class: com.mysql.cj.jdbc.Driver"></a>Cannot find class: com.mysql.cj.jdbc.Driver</h1><p>今天遇到一个超级简单的问题，却在搜索引擎里找了半天。</p><p>我的调试 BUG 能力还是有待增加</p><h3 id="一、错误重现"><a href="#一、错误重现" class="headerlink" title="一、错误重现"></a>一、错误重现</h3><h4 id="错误是找不到-jdbc-的-class-文件，但是我是配置了的"><a href="#错误是找不到-jdbc-的-class-文件，但是我是配置了的" class="headerlink" title="错误是找不到 jdbc 的 class 文件，但是我是配置了的"></a>错误是找不到 jdbc 的 class 文件，但是我是配置了的</h4><p>错误如下图：</p><p><img src="jdbc-Error/1_1.png" alt=""></p><h3 id="二、解决过程"><a href="#二、解决过程" class="headerlink" title="二、解决过程"></a>二、解决过程</h3><p>我一直在找 The error may exist in XXXXXXXX，还有 The error may involve  XXXXXX 里面的内容到底是哪里错了，找了半天发现没错</p><p>直到我无意间再次观察数据库的配置文件的内容</p><p>我发现</p><p><img src="jdbc-Error/1_2.png" alt=""></p><p>原来是 jdbc.driver=com.mysql.cj.jdbc.Driver 里面多了 cj. </p><p>将 “cj.” 删除后完美运行。</p><p>这个是因为导入的依赖  mysql-connector-java  的版本问题</p><h3 id="三、问题分析"><a href="#三、问题分析" class="headerlink" title="三、问题分析"></a>三、问题分析</h3><p>在查询资料后，发现</p><p>com.mysql.jdbc.Driver  是 mysql-connector-java 5中的，<br>com.mysql.cj.jdbc.Driver  是 mysql-connector-java 6中的 </p><p>如果弄反了，那自然会报错</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://doctor-deng.github.io/jdbc-Error.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>MySql数据库时区异常</title>
      <link>https://doctor-deng.github.io/Mysql-ServerTimeZone-Error.html</link>
      <guid>https://doctor-deng.github.io/Mysql-ServerTimeZone-Error.html</guid>
      <pubDate>Sun, 15 Mar 2020 13:17:32 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h1 id=&quot;MySql数据库时区异常&quot;&gt;&lt;a href=&quot;#MySql数据库时区异常&quot; class=&quot;headerlink&quot; title=&quot;MySql数据库时区异常&quot;&gt;&lt;/a&gt;MySql数据库时区异常&lt;/h1&gt;&lt;h4 id=&quot;一、错误出现&quot;&gt;&lt;a
          
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="MySql数据库时区异常"><a href="#MySql数据库时区异常" class="headerlink" title="MySql数据库时区异常"></a>MySql数据库时区异常</h1><h4 id="一、错误出现"><a href="#一、错误出现" class="headerlink" title="一、错误出现"></a><strong>一、错误出现</strong></h4><p>org.apache.ibatis.exceptions.PersistenceException: ### Error querying database. Cause: java.sql.SQLException: The server time zone value ‘ÖÐ¹ú±ê×¼Ê±¼ä’ is unrecognized or represents mor</p><p><img src="Mysql-ServerTimeZone-Error/1_1.jpg" alt=""></p><h4 id="二、解决办法"><a href="#二、解决办法" class="headerlink" title="二、解决办法"></a><strong>二、解决办法</strong></h4><p>经过网上的一些资料，再查询了  MySQL JDBC URL  参数</p><h5 id="解决方法一：在配置-JDBC-的地方，在-url-字符串连接后面加上-serverTimeZone-Asia-Shanghai"><a href="#解决方法一：在配置-JDBC-的地方，在-url-字符串连接后面加上-serverTimeZone-Asia-Shanghai" class="headerlink" title="解决方法一：在配置 JDBC 的地方，在 url 字符串连接后面加上 ?serverTimeZone=Asia\Shanghai"></a><strong>解决方法一：</strong>在配置 JDBC 的地方，在 url 字符串连接后面加上 ?serverTimeZone=Asia\Shanghai</h5><p>比如： jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Shanghai&amp;characterEncoding=utf-8&amp;useSSL=false</p><h5 id="解决方法二：修改-Mysql-数据库配置，需要-DBA-的-root-权限"><a href="#解决方法二：修改-Mysql-数据库配置，需要-DBA-的-root-权限" class="headerlink" title="解决方法二：修改 Mysql 数据库配置，需要 DBA 的 root 权限"></a><strong>解决方法二：</strong>修改 Mysql 数据库配置，需要 DBA 的 root 权限</h5><p>使用管理员权限（root）用户登录 mysql</p><p>查看时区值：  show variables like ‘%time_zone%’; </p><p>设置为东八区（北京时间） set global time_zone=’+8:00’; </p><p><img src="Mysql-ServerTimeZone-Error/1_2.png" alt=""></p><h5 id="解决方法三：可以在-pom-xml-的数据库依赖里面降低-mysql-jdbc-驱动的版本号"><a href="#解决方法三：可以在-pom-xml-的数据库依赖里面降低-mysql-jdbc-驱动的版本号" class="headerlink" title="解决方法三：可以在 pom.xml 的数据库依赖里面降低 mysql  jdbc 驱动的版本号"></a><strong>解决方法三：</strong>可以在 pom.xml 的数据库依赖里面降低 mysql  jdbc 驱动的版本号</h5><p> 使用低版本的MySQL jdbc驱动，5.1.47 不会存在时区的问题</p><h4 id="三、问题出现原因"><a href="#三、问题出现原因" class="headerlink" title="三、问题出现原因"></a><strong>三、问题出现原因</strong></h4><p>在事后分析代码时，发现就是 pom.xml 里面的 mysql  jdbc 驱动的版本太高</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>只要降低到 5.1.47 就不会有这个数据库时区问题的出现，也就是上文的解决方案三。</p><p>那么这里提供一些 MySQL JDBC URL 参数，可以帮助你理解解决方案一的参数。</p><table><thead><tr><th align="center"><strong>属性名</strong></th><th align="center"><strong>定义</strong></th><th align="center">要求</th><th><strong>默认值</strong></th><th><strong>版本</strong>号</th></tr></thead><tbody><tr><td align="center">useSSL</td><td align="center">与服务器进行通信时使用SSL（真／假），默认值为“假”。</td><td align="center">No</td><td>false</td><td>3.0.2</td></tr><tr><td align="center">serverTimezone</td><td align="center">覆盖时区的检测/映射。当服务器的时区为映射到Java时区时使用。</td><td align="center">No</td><td></td><td>3.0.2</td></tr><tr><td align="center">characterEncoding</td><td align="center">如果“useUnicode”被设置为“真”，处理字符串时，驱动程序应使用什么字符编码？ 默认为“autodetect”。</td><td align="center">No</td><td></td><td>1.1g</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://doctor-deng.github.io/Mysql-ServerTimeZone-Error.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>Idea 导入项目报错</title>
      <link>https://doctor-deng.github.io/ImportIdeaProject-Error01.html</link>
      <guid>https://doctor-deng.github.io/ImportIdeaProject-Error01.html</guid>
      <pubDate>Sat, 14 Mar 2020 01:01:43 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h1 id=&quot;关于-Idea-导入项目可能会报出的错误&quot;&gt;&lt;a href=&quot;#关于-Idea-导入项目可能会报出的错误&quot; class=&quot;headerlink&quot; title=&quot;关于 Idea 导入项目可能会报出的错误&quot;&gt;&lt;/a&gt;关于 Idea
          
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="关于-Idea-导入项目可能会报出的错误"><a href="#关于-Idea-导入项目可能会报出的错误" class="headerlink" title="关于 Idea 导入项目可能会报出的错误"></a>关于 Idea 导入项目可能会报出的错误</h1><pre><code>Error:(1, 1) java: 非法字符: ‘\ufeff’  Error:(1, 10) java: 需要class, interface或enum  </code></pre><p>这个问题其实是在昨天遇到的，只不过昨天因为一些私人事情，耽搁了。</p><p>那么今天就来解决下这个错误。</p><h3 id="一、在用-Idea-Open-一个-Maven-工程项目的时候（别人的）"><a href="#一、在用-Idea-Open-一个-Maven-工程项目的时候（别人的）" class="headerlink" title="一、在用 Idea Open 一个 Maven 工程项目的时候（别人的）"></a>一、在用 Idea Open 一个 Maven 工程项目的时候（别人的）</h3><pre><code>Error:(1, 1) java: 非法字符: ‘\ufeff’  Error:(1, 10) java: 需要class, interface或enum  </code></pre><p>出现了这个错误。</p><h3 id="二、解决"><a href="#二、解决" class="headerlink" title="二、解决"></a>二、解决</h3><p>1、在 IDEA 右下角改编码格式</p><p><img src="ImportIdeaProject-Error01/1_1.jpg" alt=""></p><p>2、将字符编码格式换成 GBK </p><p><img src="ImportIdeaProject-Error01/1_2.jpg" alt=""></p><p>3、再将字符编码格式换成 UTF-8</p><p><img src="ImportIdeaProject-Error01/1_3.jpg" alt=""></p><p>4、解决啦</p><p><img src="ImportIdeaProject-Error01/1_4.jpg" alt=""></p><h3 id="三、分析原因"><a href="#三、分析原因" class="headerlink" title="三、分析原因"></a>三、分析原因</h3><p>按照我在网上查询的资料，这个往往是用 IDEA 导入 Eclipse 项目的时候报错的。<br>原因是：Eclipse 可以智能的把 UTF-8+BOM 文件转为普通的 UTF-8 文件，IDEA没有这个智能转换 </p><p>那么我这个报错的原因，可能是因为原项目用的编码格式不同，IDEA 没有转换过来，所以才会进行这个报错</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://doctor-deng.github.io/ImportIdeaProject-Error01.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>数据库常见错误</title>
      <link>https://doctor-deng.github.io/Mysql-Error.html</link>
      <guid>https://doctor-deng.github.io/Mysql-Error.html</guid>
      <pubDate>Tue, 10 Mar 2020 05:49:07 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h1 id=&quot;数据库常见错误&quot;&gt;&lt;a href=&quot;#数据库常见错误&quot; class=&quot;headerlink&quot; title=&quot;数据库常见错误&quot;&gt;&lt;/a&gt;数据库常见错误&lt;/h1&gt;&lt;h6
          
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="数据库常见错误"><a href="#数据库常见错误" class="headerlink" title="数据库常见错误"></a>数据库常见错误</h1><h6 id="1、-1366-Incorrect-string-value-‘-xE7-xA8-x8B-xE5-xBA-x8F…’-for-column-‘course’-at-row-1"><a href="#1、-1366-Incorrect-string-value-‘-xE7-xA8-x8B-xE5-xBA-x8F…’-for-column-‘course’-at-row-1" class="headerlink" title="1、 1366 Incorrect string value: ‘\xE7\xA8\x8B\xE5\xBA\x8F…’ for column ‘course’ at row 1"></a>1、 1366 Incorrect string value: ‘\xE7\xA8\x8B\xE5\xBA\x8F…’ for column ‘course’ at row 1</h6><p>你有时会发现不能插入中文， 在 Mysql 的数据里面。</p><p>那么你可以试试检查下，数据库的编码，以及你所在表的编码格式</p><p><img src="Mysql-Error/1_1.PNG" alt=""></p><p><img src="Mysql-Error/1_2.PNG" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://doctor-deng.github.io/Mysql-Error.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>Mysql-java-shujuleixing</title>
      <link>https://doctor-deng.github.io/Mysql-java-shujuleixing.html</link>
      <guid>https://doctor-deng.github.io/Mysql-java-shujuleixing.html</guid>
      <pubDate>Tue, 10 Mar 2020 04:47:29 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h1 id=&quot;MYSQL类型与实体类中属性的JAVA类型对应表&quot;&gt;&lt;a href=&quot;#MYSQL类型与实体类中属性的JAVA类型对应表&quot; class=&quot;headerlink&quot;
          
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="MYSQL类型与实体类中属性的JAVA类型对应表"><a href="#MYSQL类型与实体类中属性的JAVA类型对应表" class="headerlink" title="MYSQL类型与实体类中属性的JAVA类型对应表"></a>MYSQL类型与实体类中属性的JAVA类型对应表</h1><p><img src="Mysql-java-shujuleixing/1_1.PNG" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://doctor-deng.github.io/Mysql-java-shujuleixing.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>知识点不足记录</title>
      <link>https://doctor-deng.github.io/Disadvantage.html</link>
      <guid>https://doctor-deng.github.io/Disadvantage.html</guid>
      <pubDate>Tue, 10 Mar 2020 02:17:52 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;p&gt;今天在刷算法题时，对于反转链表，还是不能够理解&lt;/p&gt;
&lt;pre class=&quot; language-java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt; &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span
          
        
      
      </description>
      
      
      <content:encoded><![CDATA[<p>今天在刷算法题时，对于反转链表，还是不能够理解</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> val<span class="token punctuation">;</span>        ListNode next <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> ListNode <span class="token function">ReverseList</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ListNode newHead <span class="token operator">=</span> null<span class="token punctuation">;</span>            ListNode next <span class="token operator">=</span> null<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//保存断裂后原始链表的头节点</span>                head<span class="token punctuation">.</span>next <span class="token operator">=</span> newHead<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//改变指针指向方向，将当前节点指向反转链表的头节点</span>                newHead <span class="token operator">=</span> head<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// newHead 指向反转链表的新的头节点</span>                head <span class="token operator">=</span> next<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//继续循环</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> newHead<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>不能理解的地方如下，参考资料： <a href="https://blog.csdn.net/coder_kirito/article/details/99659392" target="_blank" rel="noopener">https://blog.csdn.net/coder_kirito/article/details/99659392</a> </p><pre class=" language-java"><code class="language-java">                 head<span class="token punctuation">.</span>next <span class="token operator">=</span> newHead<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//改变指针指向方向，将当前节点指向反转链表的头节点</span>                newHead <span class="token operator">=</span> head<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// newHead 指向反转链表的新的头节点</span>                head <span class="token operator">=</span> next<span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//继续循环</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://doctor-deng.github.io/Disadvantage.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>博客问题记录</title>
      <link>https://doctor-deng.github.io/problem-hexo-1.html</link>
      <guid>https://doctor-deng.github.io/problem-hexo-1.html</guid>
      <pubDate>Mon, 09 Mar 2020 02:32:28 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h1 id=&quot;YAMLException-can-not-read-a-block-mapping-entry-a-multiline-key-may-not-be-an-implicit-key-at-line-4-column-1&quot;&gt;&lt;a
          
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="YAMLException-can-not-read-a-block-mapping-entry-a-multiline-key-may-not-be-an-implicit-key-at-line-4-column-1"><a href="#YAMLException-can-not-read-a-block-mapping-entry-a-multiline-key-may-not-be-an-implicit-key-at-line-4-column-1" class="headerlink" title="YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 4, column 1:"></a>YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 4, column 1:</h1><p>ERROR Process failed: _posts/mianshi-1.md</p><p>YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line 4, column 1:</p><p><img src="problem-hexo-1/problem_1.PNG" alt=""></p><p>这个错误是在你写的文章的  md 文件中头部声明没加空格。</p><p>一个很微小的错误。</p><p><img src="problem-hexo-1/problem_1_1.PNG" alt=""></p><p>在 tags: 后面加一个空格就解决了</p><p><img src="problem-hexo-1/problem_1_2.PNG" alt=""></p><p>tags:的标准格式：</p><p>tags:  [标签1，标签2，标签3]</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://doctor-deng.github.io/problem-hexo-1.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>总结不足</title>
      <link>https://doctor-deng.github.io/mianshi-1.html</link>
      <guid>https://doctor-deng.github.io/mianshi-1.html</guid>
      <pubDate>Sun, 08 Mar 2020 11:35:53 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h1 id=&quot;阿里巴巴暑期-java-实习电话一面&quot;&gt;&lt;a href=&quot;#阿里巴巴暑期-java-实习电话一面&quot; class=&quot;headerlink&quot; title=&quot;阿里巴巴暑期 java 实习电话一面&quot;&gt;&lt;/a&gt;阿里巴巴暑期 java
          
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="阿里巴巴暑期-java-实习电话一面"><a href="#阿里巴巴暑期-java-实习电话一面" class="headerlink" title="阿里巴巴暑期 java 实习电话一面"></a>阿里巴巴暑期 java 实习电话一面</h1><p>前言：阿里的 HR 在前一天的下午 4 点钟左右询问我，大概什么时候有空，这边给你安排电话面试（因为今天很忙，安排不了你的电话面试）。我于是定了今天，我说今天都行，HR 就给我定了今天的下午</p><p>接到通知，说有电话面试的时候，我是不太敢相信的的，内心深处的想法：简历筛选竟然没将我的简历 pass 掉。</p><p>既然机会来了，那就去稍微争取一下，背背面经，于是根据之前前辈们的推荐，在牛客网找面经。</p><h3 id="面试流程："><a href="#面试流程：" class="headerlink" title="面试流程："></a>面试流程：</h3><p>HR 问到是不是 XXX，我是昨天给你约的腾讯俱乐部的面试<br>我看你这份简历写的是大二学生，但你现在应该是大三学生吧</p><p>当时我是想着将项目做好后，再去进行简历优化，目前简历没有更新</p><p>HR 开始询问你所学的课程，并开始询问第一个问题：</p><ul><li><p>数据结构里面，链表、数组、队列、栈大概的讲讲优缺点</p><p>刚好所整理的面经资料里，有链表和数组的一个区别，于是便回答了：</p><p>链表有着查询快，增删慢的优缺点</p><p>而数组则有着查询慢，增删快的优缺点</p><p>还没等我说完队列和栈的一个优缺点，HR 开始问为什么会有这样的优缺点。</p><p>还没等我说完队列和栈的一个优缺点，HR 开始问为什么会有这样的优缺点。</p></li></ul><p>  在我回答完之后，继续接着询问栈和队列的特点</p><p>  我只能答出队列是先进先出，栈是先进后出。</p><p>因为刚刚我的回答中有提到在链表查询的时候要对整个数组遍历，才能查询出能确定目标元素，所以 HR 接着问：</p><ul><li><p>树的遍历有着深度遍历和广度遍历，你能大概说一下树的这两个遍历的过程么？</p><p>我懵了，这个知识点再背面经的时候，完全没遇到（临时抱佛脚去面试大厂是没用的），我只能如实回答，还没复习到</p></li></ul><p>很快，第三个问题接踵而来：</p><ul><li><p>java 语言中的数据结构，你现在用的比较多的是哪些？</p><p>（我觉得这个是开始考察我有哪些擅长的知识点，给我一个展现的机会，将问题的主动权交给我，但实力不济，有再多的主动权也无济于事）</p><p>我开始迷迷糊糊</p></li><li><p>HR ：比如说数组和链表是怎么实现的，你想去做一个数组怎么样去做，你想去做一个链表怎么样去做，用 java 哪个函数哪个列</p><p>我只能答出 ArrayList 数组，虽然我都不知道这个数组与问题是否相关</p></li></ul><p>HR  ：</p><ul><li><p>ArrayList 数组与数据结构的中的数组有没有什么区别，还是说有更高级的逻辑，有更高级的一些功能</p><p>懵圈中，如实回答，我不会，还没复习到这里</p></li></ul><p>HR ：刚刚有看到你有提到过 hashMap，那你能说说他的底层是怎么实现的么？</p><ul><li>（这个问题是高频面试题，面经中也有准备）</li></ul><p>HR ：hashMap 中的 key 怎么判断是否相同，以什么标准的判断相同？</p><ul><li>懵圈中</li><li>在面试后查询相关资料得知：HashMap 是以 key-value 形式存储数据，不允许存在相同的 key。<br>HashMap中的 key 可不可以使用对象，可以，但是不推荐。<br>比较对象是否相等，比较的是引用地址。一般需要重写 hashcode 和equals 方法来判断对象是否相等。</li></ul><p>HR ：开始问我一些个人规划，还有就是你有什么想要问的</p><p>接下来就是和 HR 的聊天了，这个时候我询问 HR 要怎么去巩固一些基础，怎么去拓展自己的横向知识面，纵向知识面。</p><p>HR 给的建议还是多做几个项目，在敲代码的同时不能忘掉其它技能，基础也很重要</p><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>其实面试这东西还是要有一段的时间去准备，像我这种意外情况，最好也要有自己的一个意外准备面试情况。</p><p>项目这东西已经迫不及待了，你对你的项目必须十分熟悉，才能流利地回答面试官给你出的问题</p><p>基础还是打好，借用一位牛客网大佬的公式：offer = <strong>心态</strong> * (实力 + 面试技巧) + 缘分运气 </p><p>我这次的面试，其实言语中还是透露中紧张，衣服都湿透了，汗流不止，因为是人生中第一次 offer 面试。</p><p>不过在我眼里：能总结出不足的面试就是一场好面试</p><p>借用豪哥的一句话，在学生福利时期，要把握住冲击大厂的机会，出去社会之后再选择大厂，那么机会与难度会大幅度增长</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://doctor-deng.github.io/mianshi-1.html#disqus_thread</comments>
    </item>
    
    <item>
      <title>Idea插件下载错误</title>
      <link>https://doctor-deng.github.io/idea.html</link>
      <guid>https://doctor-deng.github.io/idea.html</guid>
      <pubDate>Fri, 06 Mar 2020 11:29:52 GMT</pubDate>
      <description>
      
        
        
          
          
            &lt;h1 id=&quot;IDEA-下载插件提示错误的解决办法&quot;&gt;&lt;a href=&quot;#IDEA-下载插件提示错误的解决办法&quot; class=&quot;headerlink&quot; title=&quot;IDEA 下载插件提示错误的解决办法&quot;&gt;&lt;/a&gt;IDEA
          
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="IDEA-下载插件提示错误的解决办法"><a href="#IDEA-下载插件提示错误的解决办法" class="headerlink" title="IDEA 下载插件提示错误的解决办法"></a>IDEA 下载插件提示错误的解决办法</h1><p>Plugin Lombok was not installed: Cannot download ‘<a href="https://plugins.jetbrains.com/pluginManager/?action=download&amp;id=Lombook%20Plugin&amp;build=IU-182.4505.22&amp;uuid=c56ba196-b869-48ae-8fb4-abaaeb6537d3'" target="_blank" rel="noopener">https://plugins.jetbrains.com/pluginManager/?action=download&amp;id=Lombook%20Plugin&amp;build=IU-182.4505.22&amp;uuid=c56ba196-b869-48ae-8fb4-abaaeb6537d3'</a>: Connection reset</p><p>笔者今天在下载插件时，遇到插件下载失败的情况，最终成功解决。<br>如果你发现你的错误和我类似，那么这篇文章可供你进行参考。<br>上面的错误信息 Lombok 就是插件名，那我就以 Lombok 为一个例子</p><h2 id="首先安装插件"><a href="#首先安装插件" class="headerlink" title="首先安装插件"></a>首先安装插件</h2><p>在 File -&gt; Settings 中找到 Appearance &amp; Behavior ——&gt; System Settings ——&gt; updates 将红框中的勾给去掉</p><p><img src="idea/1-1.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content:encoded>
      
      <comments>https://doctor-deng.github.io/idea.html#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
